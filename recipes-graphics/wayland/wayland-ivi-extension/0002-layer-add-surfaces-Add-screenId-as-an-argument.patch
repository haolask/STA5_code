From 7856525e8cd121d960b98914794981c2d10d57ad Mon Sep 17 00:00:00 2001
From: Romain PATEY <romain.patey@st.com>
Date: Fri, 8 Feb 2019 18:02:21 +0100
Subject: layer-add-surfaces: use screen ID instead of display name

Add Screen_ID as a argument to handle multiple screens.
Removed choose_screen function as it is redundant
after this change

Change-Id: I2f1c2dba377fdd9d363718518efe577c93703554
Signed-off-by: Romain PATEY <romain.patey@st.com>

diff --git a/ivi-layermanagement-examples/layer-add-surfaces/src/layer-add-surfaces.c b/ivi-layermanagement-examples/layer-add-surfaces/src/layer-add-surfaces.c
index 5a31fa3..4f71bf2 100644
--- a/ivi-layermanagement-examples/layer-add-surfaces/src/layer-add-surfaces.c
+++ b/ivi-layermanagement-examples/layer-add-surfaces/src/layer-add-surfaces.c
@@ -33,11 +33,11 @@
 
 t_ilm_uint screenWidth;
 t_ilm_uint screenHeight;
+static t_ilm_uint screen_ID = 0;
 static t_ilm_uint layer = 0;
 pthread_mutex_t mutex;
 static pthread_cond_t  waiterVariable = PTHREAD_COND_INITIALIZER;
-static int number_of_surfaces = 0;
-char display_name[256] = {0};
+static t_ilm_uint number_of_surfaces = 0;
 
 static void configure_ilm_surface(t_ilm_uint id, t_ilm_uint width, t_ilm_uint height)
 {
@@ -96,49 +96,11 @@ static void callbackFunction(ilmObjectType object, t_ilm_uint id, t_ilm_bool cre
     }
 }
 
-/* Choose the display with the largest resolution.*/
-static t_ilm_uint choose_screen(void)
-{
-    struct ilmScreenProperties screenProperties;
-    t_ilm_uint* screen_IDs = NULL;
-    t_ilm_uint screen_ID = 0;
-    t_ilm_uint screen_count = 0;
-    t_ilm_uint choosen_width = 0;
-    t_ilm_uint choosen_height = 0;
-    t_ilm_uint i;
-
-    ilm_getScreenIDs(&screen_count, &screen_IDs);
-
-    for (i = 0; i<screen_count; i++)
-    {
-        ilm_getPropertiesOfScreen(screen_IDs[i], &screenProperties);
-        if (!strcmp(screenProperties.connectorName, display_name)) {
-            choosen_width = screenProperties.screenWidth;
-            choosen_height = screenProperties.screenHeight;
-            screen_ID = screen_IDs[i];
-            break;
-        }
-        else if (screenProperties.screenWidth > choosen_width) {
-            choosen_width = screenProperties.screenWidth;
-            choosen_height = screenProperties.screenHeight;
-            screen_ID = screen_IDs[i];
-        }
-    }
-
-    screenWidth = choosen_width;
-    screenHeight = choosen_height;
-
-    free(screen_IDs);
-
-    return screen_ID;
-}
-
 static int
 usage(int ret)
 {
     fprintf(stderr, "    -h,  --help                  display this help and exit.\n"
-                    "    -d,  --display-name          name of the display which will be used,\n"
-                    "                                 e.g.: HDMI-A-1, LVDS1\n"
+                    "    -D,  --screen-id             ID of the display which will be used,\n"
                     "                                 If it is not set, display with highest resolution is used.\n"
                     "    -l,  --layer-id              id of the used ILM layer. It has to be set\n"
                     "    -s,  --surface-count         number of surfaces which will be added to\n"
@@ -151,14 +113,14 @@ void parse_options(int argc, char *argv[])
     int opt;
     static const struct option options[] = {
         { "help",              no_argument, NULL, 'h' },
+        { "screen-id", required_argument, NULL, 'D' },
         { "layer-id",              required_argument, 0, 'l' },
         { "surface-count",           required_argument, 0, 's' },
-        { "display-name", required_argument, NULL, 'd' },
         { 0,                   0,           NULL, 0 }
     };
 
     while (1) {
-        opt = getopt_long(argc, argv, "hl:s:d:", options, NULL);
+        opt = getopt_long(argc, argv, "hD:l:s:", options, NULL);
 
         if (opt == -1)
             break;
@@ -167,31 +129,33 @@ void parse_options(int argc, char *argv[])
             case 'h':
                 usage(0);
                 break;
+            case 'D':
+                screen_ID = atoi(optarg);
+                break;
             case 'l':
                 layer = atoi(optarg);
                 break;
             case 's':
                 number_of_surfaces = atoi(optarg);
                 break;
-            case 'd':
-                strcpy(display_name, optarg);
-                break;
             default:
                 usage(-1);
                 break;
         }
     }
 
-    printf("layer-add-surfaces: layer (%u) on display (%s) created, waiting for %d surfaces ...\n",
+    printf("layer-add-surfaces: layer (%u) on display (%d) created, waiting for %d surfaces ...\n",
                layer,
-               display_name,
+               screen_ID,
                number_of_surfaces);
 }
 
 int main (int argc, char *argv[])
 {
+     struct ilmScreenProperties screenProperties;
+
     // Get command-line options
-    if ( argc < 3) {
+    if ( argc < 4) {
         usage(-1);
     }
 
@@ -199,8 +163,9 @@ int main (int argc, char *argv[])
     if (!strncmp(argv[1], "-", 1)) {
         parse_options(argc, argv);
     } else {
-        layer = strtol(argv[1], NULL, 0);
-        number_of_surfaces = strtol(argv[2], NULL, 0);
+        screen_ID = strtol(argv[1], NULL, 0);
+        layer = strtol(argv[2], NULL, 0);
+        number_of_surfaces = strtol(argv[3], NULL, 0);
     }
 
     if (!number_of_surfaces || !layer)
@@ -228,14 +193,16 @@ int main (int argc, char *argv[])
     pthread_mutexattr_destroy(&a);
 
     t_ilm_layer renderOrder[1];
-    t_ilm_uint screen_ID;
     renderOrder[0] = layer;
     if (ilm_init() == ILM_FAILED) {
         fprintf(stderr, "layer-add-surfaces: ilm_init failed\n");
         return -1;
     }
 
-    screen_ID = choose_screen();
+    ilm_getPropertiesOfScreen(screen_ID, &screenProperties);
+    screenWidth = screenProperties.screenWidth;
+    screenHeight = screenProperties.screenHeight;
+    printf("GetPropertiesOfScreen: screen ID (%d), Width (%u), Height (%u)\n", screen_ID, screenWidth, screenHeight);
     ilm_layerCreateWithDimension(&layer, screenWidth, screenHeight);
     printf("layer-add-surfaces: layer (%d) destination region: x:0 y:0 w:%u h:%u\n", layer, screenWidth, screenHeight);
     ilm_layerSetVisibility(layer,ILM_TRUE);
