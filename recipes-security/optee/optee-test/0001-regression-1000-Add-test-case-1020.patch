From 87205360e73c933e8c82859e1aa0f3cea17d2033 Mon Sep 17 00:00:00 2001
From: Olivier Claude LEBRETON <olivier.lebreton@st.com>
Date: Wed, 8 Aug 2018 13:03:17 +0200
Subject: [PATCH 1/2] regression: 1000: Add test case 1020

Add regression case 1020 to test HSM additional services out of crypto API

Signed-off-by: Olivier Claude LEBRETON <olivier.lebreton@st.com>
---
 host/xtest/nist/tlsv12prftestvectors.h | 1068 ++++++++++++++++++++++++++++++++
 host/xtest/regression_1000.c           |  192 ++++++
 host/xtest/xtest_test.c                |    7 +
 host/xtest/xtest_test.h                |    1 +
 4 files changed, 1268 insertions(+)
 create mode 100644 host/xtest/nist/tlsv12prftestvectors.h

diff --git a/host/xtest/nist/tlsv12prftestvectors.h b/host/xtest/nist/tlsv12prftestvectors.h
new file mode 100644
index 0000000..79f3637
--- /dev/null
+++ b/host/xtest/nist/tlsv12prftestvectors.h
@@ -0,0 +1,1068 @@
+/*
+ * TLS v12 PRF test vectors
+ */
+
+#ifdef CFG_CRYPTO_WITH_HSM
+
+/* Enumeration of possible hash functions */
+enum {
+	E_MD5,          /* MD5 */
+	E_SHA1,         /* SHA-1 */
+	E_SHA224,       /* SHA-224 */
+	E_SHA256,       /* SHA-256 */
+	E_SHA384,       /* SHA-384 */
+	E_SHA512,       /* SHA-512 */
+	E_INVALID_HASH  = 0xFFFFFFFF,
+};
+
+/* Test Vector #0: generating 80 bytes with SHA-384 */
+#define SECRET0_SIZE	48
+#define LABEL0_SIZE		15
+#define SEED0_SIZE		64
+#define PRFOUT0_SIZE	80
+#define SHA_ID0			E_SHA384
+static const uint8_t secret0[] = {
+	0x24,0x25,0xA0,0x01,0xD0,0x4B,0xEE,0xCB,0x02,0x34,0x86,0x01,
+	0x27,0x21,0x13,0x08,0x61,0x53,0x02,0xF0,0xAC,0xCA,0x9F,0xF2,
+	0x05,0x8D,0x3C,0x65,0xC7,0xCE,0x88,0x05,0x98,0x50,0x4C,0xB0,
+	0x9E,0x33,0x7C,0x61,0xD4,0x10,0x8A,0xDC,0xD4,0xA3,0xF6,0xC8
+};
+static const uint8_t label0[] = {
+	0x73,0x65,0x72,0x76,0x65,0x72,0x20,0x66,0x69,0x6E,0x69,0x73,
+	0x68,0x65,0x64
+};
+static const uint8_t seed0[] = {
+	0x5B,0xB8,0x65,0x03,0xF1,0x49,0x7C,0x38,0x90,0x72,0x1C,0x7F,
+	0x56,0x10,0xB5,0x98,0xB9,0x57,0xFD,0x27,0x0E,0x47,0xF2,0x18,
+	0xC9,0x0B,0x47,0x90,0x77,0x25,0xE8,0x33,0xAC,0xBC,0x9D,0x2C,
+	0x42,0x80,0x96,0x29,0xE4,0x38,0xD6,0x79,0x4B,0xD4,0x11,0xF9,
+	0x5F,0x09,0x1A,0x72,0x0D,0xD3,0x9D,0x04,0xE5,0x32,0x66,0x8F,
+	0xDD,0x69,0x77,0x59
+};
+static const uint8_t prfout0[] = {
+	0xB2,0x17,0x59,0x0F,0x6F,0x4D,0xA0,0x51,0xC5,0x78,0x8C,0xFC,
+	0x02,0x9D,0x75,0x94,0x35,0x79,0xD8,0xD5,0x5B,0xC6,0x99,0x87,
+	0x72,0x0F,0x39,0x86,0xDC,0xCF,0xB2,0x12,0x04,0x4C,0x51,0x1E,
+	0x39,0xCC,0xEA,0x78,0xBB,0x70,0x18,0x16,0x3B,0x25,0x8C,0x6B,
+	0x42,0x84,0x02,0x36,0xBE,0xE0,0xC8,0xA0,0x18,0xBB,0x57,0x87,
+	0xA0,0x8D,0x06,0xCB,0x4C,0xD6,0x56,0x73,0xC8,0x57,0x47,0x33,
+	0xD1,0xCD,0xB0,0xDC,0x0E,0xBE,0x07,0xD2
+};
+
+/* Test Vector #1: generating 82 bytes with SHA-384 */
+#define SECRET1_SIZE	48
+#define LABEL1_SIZE		13
+#define SEED1_SIZE		64
+#define PRFOUT1_SIZE	82
+#define SHA_ID1			E_SHA384
+static const uint8_t secret1[] = {
+	0xAD,0x16,0xFD,0x1A,0xD7,0xB6,0x34,0x5E,0xD8,0x16,0x43,0x7C,
+	0x45,0x77,0x37,0x17,0x4A,0x85,0xC8,0xDF,0xEA,0xDE,0x50,0x94,
+	0x09,0xB9,0x11,0xE6,0x76,0x87,0x84,0xE5,0xC3,0x09,0x83,0x2A,
+	0xDE,0xBE,0x59,0x38,0x63,0xCF,0xFC,0xB6,0x75,0x59,0x58,0x69
+};
+static const uint8_t label1[] = {
+	0x6B,0x65,0x79,0x20,0x65,0x78,0x70,0x61,0x6E,0x73,0x69,0x6F,
+	0x6E
+};
+static const uint8_t seed1[] = {
+	0x41,0x11,0x28,0x44,0x48,0x30,0x07,0x67,0xBB,0x3C,0x81,0x06,
+	0x7C,0x59,0x5D,0x54,0x61,0x56,0xB5,0x0D,0x87,0x5C,0x9F,0x70,
+	0xD9,0xF3,0x3B,0x8D,0x1E,0x79,0x4F,0x58,0xF5,0x25,0x13,0x00,
+	0x89,0x0B,0x65,0x34,0x39,0x1E,0xCB,0x89,0xA4,0xD7,0x1D,0x10,
+	0x1E,0xE6,0x2D,0x03,0xE0,0xF3,0xDB,0xBD,0x18,0x7D,0x18,0x33,
+	0x18,0x8A,0x0F,0x1C
+};
+static const uint8_t prfout1[] = {
+	0xF1,0x0C,0x6F,0x82,0x55,0x21,0xF9,0x81,0xF9,0xF9,0x30,0x93,
+	0xA9,0x11,0xBF,0x92,0xA8,0x23,0x20,0xA4,0x35,0x11,0x08,0x60,
+	0x0D,0x80,0x22,0xA7,0x47,0x55,0x9A,0x0B,0x96,0xBC,0x95,0x24,
+	0xC3,0x73,0x5F,0x7A,0xCE,0x4A,0x93,0xDF,0x18,0xCA,0x22,0xAB,
+	0x4E,0xE3,0x70,0x55,0x11,0x3F,0x0B,0xF9,0x3B,0xA0,0x00,0x91,
+	0x0F,0x20,0xF5,0x26,0x13,0x36,0xDC,0x1B,0xAB,0x17,0xD5,0x44,
+	0x35,0x8E,0x7D,0x61,0xD8,0xE4,0xD6,0x2B,0xFF,0x3B
+};
+
+/* Test Vector #2: generating 8 bytes with SHA-256 */
+#define SECRET2_SIZE	32
+#define LABEL2_SIZE		15
+#define SEED2_SIZE		32
+#define PRFOUT2_SIZE	8
+#define SHA_ID2			E_SHA256
+static const uint8_t secret2[] = {
+	0xB4,0xA7,0x53,0xBC,0xFC,0xB2,0x7B,0xE9,0x95,0x2F,0x16,0x58,
+	0xE8,0x30,0x88,0xB1,0x06,0x80,0x48,0x49,0x38,0xB8,0x16,0x78,
+	0xC9,0x9D,0xDE,0x2C,0xBE,0xB9,0x59,0xCD
+};
+static const uint8_t label2[] = {
+	0x63,0x6C,0x69,0x65,0x6E,0x74,0x20,0x66,0x69,0x6E,0x69,0x73,
+	0x68,0x65,0x64
+};
+static const uint8_t seed2[] = {
+	0x04,0xCE,0xE9,0xBD,0xCA,0xF7,0x01,0xCB,0xBF,0x9E,0xD9,0x7F,
+	0xF7,0xD1,0x0B,0xD0,0x35,0x8F,0x8D,0x04,0x66,0x39,0xD7,0x11,
+	0xAB,0x29,0x9C,0x92,0x04,0xB0,0x7B,0x88
+};
+static const uint8_t prfout2[] = {
+	0x9A,0x0B,0x30,0x24,0x78,0xF2,0xE4,0x07
+};
+
+/* Test Vector #3: generating 62 bytes with SHA-512 */
+#define SECRET3_SIZE	64
+#define LABEL3_SIZE		15
+#define SEED3_SIZE		64
+#define PRFOUT3_SIZE	62
+#define SHA_ID3			E_SHA512
+static const uint8_t secret3[] = {
+	0x56,0xB1,0xC7,0x0B,0x90,0x65,0x5F,0x45,0x59,0x74,0x9C,0x51,
+	0xD3,0xF6,0x8D,0xC0,0x86,0xED,0x49,0xAE,0x82,0x86,0x84,0x65,
+	0x1B,0x8F,0x1E,0x89,0x25,0xC8,0x02,0x2C,0x00,0xCE,0x3C,0x5C,
+	0x32,0x15,0x32,0x82,0x2B,0x89,0x72,0x62,0xD2,0x8F,0x2D,0xF6,
+	0xD2,0xC9,0x51,0xB8,0xC0,0x0F,0xFB,0xD5,0x64,0xE6,0x6B,0xB0,
+	0xDB,0x0A,0xF6,0x17
+};
+static const uint8_t label3[] = {
+	0x73,0x65,0x72,0x76,0x65,0x72,0x20,0x66,0x69,0x6E,0x69,0x73,
+	0x68,0x65,0x64
+};
+static const uint8_t seed3[] = {
+	0xD4,0x97,0x9D,0xB0,0x58,0xF0,0xFB,0x97,0x70,0xF4,0x30,0x15,
+	0x08,0x78,0x7E,0xCC,0x55,0x86,0xDD,0x52,0xEE,0xE3,0x04,0x5E,
+	0x2A,0x63,0xD1,0x87,0xBE,0xF3,0x2B,0xDA,0x65,0xAC,0x63,0xF9,
+	0x76,0xF2,0x28,0x9A,0xB4,0xBF,0xF7,0x54,0xB6,0xAA,0x5E,0xC6,
+	0xB7,0x1C,0xEC,0xE0,0x62,0x2A,0x27,0xE4,0xBA,0xA2,0xF3,0xCF,
+	0xF4,0xFA,0xE9,0x1A
+};
+static const uint8_t prfout3[] = {
+	0xD4,0xE2,0x39,0xFC,0xF2,0x91,0xD6,0x50,0xB2,0xE2,0x18,0x70,
+	0x9E,0xD5,0xCE,0xBF,0x67,0xDD,0x7B,0x24,0x1B,0x39,0xC5,0xDE,
+	0x47,0x73,0x72,0xF9,0x5D,0x29,0x51,0x8C,0xBB,0xD8,0x5C,0x9A,
+	0xC6,0x08,0xBB,0xD5,0x6F,0xD4,0x58,0xEE,0x73,0xB8,0x95,0xED,
+	0xA3,0xBD,0xCD,0x17,0x6F,0x68,0x2B,0xD4,0xC0,0x0D,0x12,0x6F,
+	0x34,0x71
+};
+
+/* Test Vector #4: generating 197 bytes with SHA-384 */
+#define SECRET4_SIZE	32
+#define LABEL4_SIZE		13
+#define SEED4_SIZE		32
+#define PRFOUT4_SIZE	197
+#define SHA_ID4			E_SHA384
+static const uint8_t secret4[] = {
+	0x0A,0xB5,0x97,0xE2,0xBB,0xF0,0xFF,0x3E,0x51,0x1F,0x5D,0x94,
+	0x41,0xB2,0x2B,0xF4,0x54,0x4D,0x35,0x89,0xBC,0x9F,0x1D,0x2D,
+	0x4E,0x42,0xF2,0x63,0xD0,0xF7,0x9E,0x78
+};
+static const uint8_t label4[] = {
+	0x6B,0x65,0x79,0x20,0x65,0x78,0x70,0x61,0x6E,0x73,0x69,0x6F,
+	0x6E
+};
+static const uint8_t seed4[] = {
+	0x82,0x32,0xA9,0xFD,0x85,0x64,0xCB,0xA3,0x15,0x6B,0xB9,0xF2,
+	0xDF,0xB5,0x3C,0x50,0x47,0xE7,0xE9,0x32,0x1B,0x1C,0x69,0x39,
+	0x6C,0x99,0x88,0x66,0xDC,0x12,0xE3,0x0D
+};
+static const uint8_t prfout4[] = {
+	0x71,0xD6,0x1A,0x95,0x51,0x04,0x04,0x10,0xE2,0x9B,0x75,0xE5,
+	0x04,0x5A,0x75,0x87,0xFB,0x0C,0x80,0x4B,0x6C,0x36,0xF0,0x9A,
+	0x14,0xB8,0x53,0x2E,0x67,0x98,0x52,0x64,0xA1,0xE4,0x9F,0x15,
+	0x07,0xE2,0xAB,0xBA,0x58,0xB1,0x8B,0x0F,0x44,0x2E,0x9A,0x82,
+	0x17,0x5C,0xCF,0x08,0x18,0xBB,0x5C,0x6D,0x38,0x06,0x25,0x7E,
+	0x1D,0xB9,0x91,0xA1,0x68,0x5F,0x30,0x92,0xBE,0x49,0x02,0x51,
+	0x4B,0xB6,0x08,0xAB,0xE6,0x78,0x7C,0x70,0x81,0x8A,0x56,0x3F,
+	0x0A,0xA9,0x78,0xC7,0xDF,0x55,0xC9,0xA1,0x9D,0xD9,0x0F,0xD6,
+	0x0F,0x0A,0xD2,0xDD,0x1D,0xBC,0x51,0x3A,0x24,0x82,0x13,0x75,
+	0x65,0xB2,0x83,0xBE,0x9E,0x1D,0xFF,0xD8,0x0A,0x23,0x63,0x68,
+	0x95,0xB6,0xF1,0x48,0xAB,0x75,0x47,0x3D,0x99,0x02,0x69,0x3D,
+	0x0B,0x1C,0x1C,0xFC,0x96,0x32,0xC4,0xBC,0xF7,0x96,0x9D,0x08,
+	0x7F,0x38,0x38,0x7D,0x9B,0x24,0xC7,0x9B,0xF3,0xA3,0x9A,0x5C,
+	0xD7,0x14,0xD2,0x97,0xF9,0xF0,0x58,0xC2,0xAB,0x4E,0x06,0x2F,
+	0xC1,0x9F,0x69,0x39,0x3C,0x66,0xAA,0x4A,0x79,0x0B,0x12,0xE8,
+	0xB3,0x02,0x75,0x76,0x6C,0x4F,0x75,0x25,0xDE,0x3E,0xE1,0xCB,
+	0x5B,0xE1,0xA1,0xEB,0x5F
+};
+
+/* Test Vector #5: generating 100 bytes with SHA-256 */
+#define SECRET5_SIZE	42
+#define LABEL5_SIZE		13
+#define SEED5_SIZE		32
+#define PRFOUT5_SIZE	100
+#define SHA_ID5			E_SHA256
+static const uint8_t secret5[] = {
+	0xAE,0x95,0xD1,0xC7,0x3B,0x21,0xC8,0xBB,0xB0,0x67,0xA8,0x32,
+	0x4C,0x4E,0xC0,0x5B,0x5C,0xBD,0x18,0x32,0x65,0x15,0x51,0xD7,
+	0x8A,0x4F,0x7D,0xE5,0x89,0xC2,0xD7,0xC5,0x2D,0x03,0xB3,0xAB,
+	0x02,0x3B,0xFB,0x9B,0x7E,0x51
+};
+static const uint8_t label5[] = {
+	0x6B,0x65,0x79,0x20,0x65,0x78,0x70,0x61,0x6E,0x73,0x69,0x6F,
+	0x6E
+};
+static const uint8_t seed5[] = {
+	0x17,0x3B,0xA3,0xA8,0x69,0xD9,0x40,0x75,0x67,0xD1,0x9B,0x73,
+	0x16,0x41,0x13,0x86,0x38,0x98,0xB2,0x2A,0xEA,0xBA,0xBC,0x44,
+	0x18,0xB6,0xAA,0x3A,0x20,0x9D,0x50,0x30
+};
+static const uint8_t prfout5[] = {
+	0x2C,0x9B,0x35,0x28,0x6E,0x26,0x33,0xC7,0x52,0xEC,0xCB,0xCC,
+	0x7F,0xE5,0xC8,0xBF,0x0E,0xF5,0x61,0xC0,0x98,0xE2,0xE7,0xF9,
+	0x90,0xED,0x65,0xC7,0x7D,0x6E,0x2C,0x13,0x82,0x02,0x3A,0xE7,
+	0xD8,0xAB,0x98,0xFF,0x0F,0x8C,0xE5,0x23,0x87,0x0D,0x0D,0x52,
+	0xAC,0x10,0x52,0x45,0x99,0x58,0xC9,0xCE,0x68,0x20,0x81,0xD9,
+	0x29,0x34,0x47,0x3E,0xE6,0x1C,0x91,0xD8,0x0D,0xE0,0xC1,0x43,
+	0xB1,0x26,0xA4,0x00,0xC6,0xA4,0xD9,0x2F,0x99,0xCA,0x62,0xA5,
+	0x11,0xFF,0xAD,0x00,0x96,0x6A,0xBF,0x66,0x1A,0xEA,0xAF,0x9E,
+	0x8B,0xE6,0x5F,0xDD
+};
+
+/* Test Vector #6: generating 149 bytes with SHA-512 */
+#define SECRET6_SIZE	48
+#define LABEL6_SIZE		15
+#define SEED6_SIZE		48
+#define PRFOUT6_SIZE	149
+#define SHA_ID6			E_SHA512
+static const uint8_t secret6[] = {
+	0x06,0x95,0x19,0x44,0xF1,0x56,0x24,0xFD,0x46,0x3A,0xA9,0x33,
+	0x71,0x9B,0xC0,0x8D,0x39,0x8C,0x86,0x25,0x8D,0x0A,0xB9,0xEF,
+	0x34,0x1E,0x60,0x91,0x8C,0xAC,0x21,0xB0,0x52,0xEB,0xD6,0x7A,
+	0xA3,0x46,0xF2,0x74,0x87,0x2C,0x84,0x05,0xB6,0xE2,0xB4,0xD0
+};
+static const uint8_t label6[] = {
+	0x63,0x6C,0x69,0x65,0x6E,0x74,0x20,0x66,0x69,0x6E,0x69,0x73,
+	0x68,0x65,0x64
+};
+static const uint8_t seed6[] = {
+	0x23,0xAF,0xCC,0xAB,0x5E,0xFA,0xFC,0x24,0x4B,0x50,0x08,0x2B,
+	0x9F,0xD8,0xE8,0x19,0x1C,0x0F,0x19,0xE7,0x83,0xBC,0x81,0xF1,
+	0xF0,0x8F,0xEB,0x84,0x50,0xB8,0x99,0x36,0x1F,0x67,0xBE,0x29,
+	0xEA,0x55,0x3C,0xB1,0x38,0xBB,0xBC,0x5C,0x79,0xD8,0x1A,0xC8
+};
+static const uint8_t prfout6[] = {
+	0x36,0x86,0x69,0x25,0xB9,0x87,0x32,0x9C,0xE5,0xC9,0x8A,0xCE,
+	0x3D,0xAD,0x65,0x8D,0xC0,0x0A,0xD2,0xF6,0xEA,0x64,0x87,0x19,
+	0xC8,0x45,0x0A,0x63,0x98,0x5A,0x20,0x52,0xC4,0xD8,0xFC,0xE8,
+	0x2B,0x26,0xB2,0x4D,0xAB,0x2A,0x28,0x01,0x5D,0xDA,0xF4,0x3E,
+	0x4C,0x36,0xA0,0x11,0x85,0x41,0x76,0xC3,0xEF,0xC7,0xE1,0xC8,
+	0x4D,0xA1,0xF8,0x84,0xBE,0x73,0x71,0xE6,0x13,0x9F,0xA3,0x2E,
+	0x7D,0xBA,0x18,0x48,0xDE,0xEB,0x85,0x0E,0x1E,0xED,0x9D,0x84,
+	0x89,0x0E,0x89,0x7F,0x37,0x55,0x78,0x57,0x92,0x7E,0xAC,0x43,
+	0xDF,0x37,0xB5,0xB9,0xEE,0x8C,0xEC,0x08,0xB2,0xC6,0xE0,0x4B,
+	0xDC,0x8F,0xA0,0xFA,0x91,0x6C,0x81,0x6E,0xED,0x1B,0x30,0x25,
+	0x61,0x94,0xDD,0xB9,0x16,0xE5,0x8A,0x4C,0xF5,0xD2,0x71,0x8C,
+	0x38,0x94,0x32,0xC3,0x0E,0xD2,0x8E,0x09,0xAE,0x08,0xE3,0xAC,
+	0x7F,0xA9,0x04,0x4D,0x82
+};
+
+/* Test Vector #7: generating 87 bytes with SHA-256 */
+#define SECRET7_SIZE	48
+#define LABEL7_SIZE		13
+#define SEED7_SIZE		32
+#define PRFOUT7_SIZE	87
+#define SHA_ID7			E_SHA256
+static const uint8_t secret7[] = {
+	0xD7,0xF7,0xB5,0x81,0x10,0x3D,0x48,0xB0,0x57,0x46,0xA1,0x1D,
+	0x2C,0xC0,0xEF,0x75,0x21,0xA5,0xEF,0xEC,0x80,0x59,0x62,0x6D,
+	0x10,0x96,0x7E,0x58,0x2F,0xD3,0xE1,0xC7,0x61,0x71,0x47,0x98,
+	0x79,0x53,0x9F,0x94,0xF1,0xBE,0xFF,0xCF,0x6A,0xAA,0xB9,0x01
+};
+static const uint8_t label7[] = {
+	0x6D,0x61,0x73,0x74,0x65,0x72,0x20,0x73,0x65,0x63,0x72,0x65,
+	0x74
+};
+static const uint8_t seed7[] = {
+	0xE0,0x9B,0x13,0xC3,0xF4,0xC9,0x11,0x67,0x9D,0x8E,0xFC,0xD6,
+	0x8F,0x84,0x57,0xB1,0x00,0x4C,0x1C,0xE0,0x7F,0x90,0x8B,0x80,
+	0x8D,0x6D,0x6C,0xDF,0xAA,0x77,0x6D,0xA6
+};
+static const uint8_t prfout7[] = {
+	0x87,0x9B,0x5E,0x67,0xF6,0x82,0xA1,0x16,0xEB,0x1E,0x73,0xED,
+	0xEF,0xD7,0x71,0xB7,0xCC,0xF9,0xD8,0x21,0xE1,0x84,0xBF,0xD0,
+	0x18,0x1D,0xA1,0x4C,0xA3,0xE5,0x6A,0x15,0x52,0x2B,0x22,0x51,
+	0x0B,0x33,0x16,0x02,0x7E,0x80,0x32,0x42,0x17,0x74,0x9C,0x85,
+	0x49,0xBC,0x1F,0x72,0x59,0x18,0xA5,0xE0,0x95,0x5D,0x2C,0xE9,
+	0x42,0x02,0x91,0x6F,0x62,0x94,0x31,0xF4,0x27,0x45,0x04,0x92,
+	0x1B,0xC8,0xE6,0xE4,0xD4,0x9B,0x17,0x5C,0x2C,0x8C,0xFD,0xCB,
+	0x7E,0xD5,0x95};
+
+/* Test Vector #8: generating 222 bytes with SHA-256 */
+#define SECRET8_SIZE	61
+#define LABEL8_SIZE		13
+#define SEED8_SIZE		64
+#define PRFOUT8_SIZE	222
+#define SHA_ID8			E_SHA256
+static const uint8_t secret8[] = {
+	0xC3,0xC9,0x76,0xFA,0xC3,0x5D,0xC8,0xE9,0xD1,0x70,0x42,0x14,
+	0x8D,0x4D,0x70,0xF9,0xA3,0xA2,0xF6,0x0B,0xA0,0x50,0x13,0xAF,
+	0x05,0xB1,0x0D,0x7D,0xE3,0x7A,0xFC,0xF4,0x34,0xBC,0x4C,0x03,
+	0xF4,0xB8,0x83,0x11,0xD5,0xEE,0x81,0xC6,0xEF,0xDE,0xF5,0x40,
+	0x74,0x62,0x4E,0x43,0xEC,0xA7,0x49,0x6F,0x07,0x32,0x93,0x7D,
+	0x34
+};
+static const uint8_t label8[] = {
+	0x6B,0x65,0x79,0x20,0x65,0x78,0x70,0x61,0x6E,0x73,0x69,0x6F,
+	0x6E
+};
+static const uint8_t seed8[] = {
+	0x0D,0x3B,0xCB,0x1F,0xF6,0x00,0x6F,0x51,0x46,0xDD,0x33,0x85,
+	0x24,0x34,0x7F,0x60,0x28,0xF7,0xCD,0xC1,0x8B,0xC7,0xFB,0x16,
+	0x73,0xA4,0xF9,0x71,0x0C,0x53,0xA4,0x29,0x09,0xC9,0xC7,0x87,
+	0xB7,0xB3,0xC9,0xE6,0x07,0xF2,0x59,0xE1,0xA9,0xCC,0x8B,0xCF,
+	0x60,0xB5,0x23,0xB2,0xFF,0x89,0x06,0xEC,0x92,0xBE,0xAE,0xCE,
+	0x5F,0xF4,0x6B,0x2B
+};
+static const uint8_t prfout8[] = {
+	0xC6,0x63,0xBE,0xDC,0xA2,0x4E,0x01,0xB5,0x2E,0x41,0x8C,0x4D,
+	0xFA,0xC6,0x88,0x9E,0x06,0x52,0x98,0xC3,0x3F,0x86,0xD3,0x25,
+	0x0A,0x85,0x74,0x8A,0x21,0x25,0xC8,0x97,0xA2,0x90,0xB8,0x25,
+	0x7D,0x2D,0x1F,0xC0,0x57,0xF1,0x93,0xD4,0x13,0x97,0xA8,0x05,
+	0xAD,0x50,0x76,0xAA,0xE7,0xB7,0xCA,0x0A,0xE1,0xF6,0x8B,0x7D,
+	0x52,0x4C,0x58,0x11,0x97,0xB6,0x33,0xD7,0xE6,0x5C,0x14,0x4D,
+	0x0E,0x74,0xFD,0x58,0x25,0xD9,0xC5,0x20,0xC5,0xDF,0x64,0x08,
+	0xE5,0xBB,0x22,0x1F,0xFC,0x83,0x01,0xB6,0x3C,0x46,0x3E,0x7B,
+	0xA3,0xA8,0xEA,0xF4,0xCC,0x13,0xFF,0x93,0xC2,0x78,0x36,0x19,
+	0xE8,0xB8,0xFD,0x36,0x48,0xFC,0x2E,0xA9,0x45,0x73,0xC2,0xD2,
+	0x36,0x1E,0x9A,0xB4,0xA6,0x70,0x85,0xD4,0x06,0x14,0xD1,0x58,
+	0xB1,0x8B,0x8C,0xBC,0x8D,0xEC,0x93,0x10,0xA1,0x28,0xE9,0x00,
+	0xCE,0xF9,0x88,0x96,0x98,0x4B,0x8F,0x5B,0x84,0x80,0x8D,0xDD,
+	0x40,0x23,0x52,0xB6,0x4E,0x9F,0xF3,0x1A,0x5F,0x15,0xFC,0xD0,
+	0x7D,0x97,0x7A,0x8A,0xB3,0x8E,0xBA,0x47,0x83,0x6E,0x18,0x94,
+	0xA4,0xCA,0x53,0xB4,0x6C,0x4A,0x2F,0x68,0x73,0xEC,0xD2,0x07,
+	0x96,0xD0,0x5B,0x23,0x64,0xC6,0x4A,0x60,0x22,0xAF,0x0F,0xFB,
+	0x0B,0x5D,0x64,0xE2,0x33,0xB4,0xB2,0x40,0x5A,0xA4,0xFA,0x35,
+	0xB8,0x2A,0xD3,0x9F,0x4C,0x86
+};
+
+/* Test Vector #9: generating 135 bytes with SHA-512 */
+#define SECRET9_SIZE	48
+#define LABEL9_SIZE		15
+#define SEED9_SIZE		32
+#define PRFOUT9_SIZE	135
+#define SHA_ID9			E_SHA512
+static const uint8_t secret9[] = {
+	0x21,0x4D,0x02,0xA9,0x05,0xE4,0xEB,0x17,0x08,0xBA,0xE1,0xEC,
+	0x6F,0x87,0x6C,0x42,0x94,0x06,0x33,0x48,0x15,0x5E,0x1E,0x57,
+	0x46,0x14,0x4B,0xB5,0xEA,0xBB,0x5A,0x4A,0x91,0xB9,0x20,0xF5,
+	0x44,0x20,0xF6,0x8A,0x12,0x31,0xA5,0x28,0xBD,0xC9,0x17,0xD4
+};
+static const uint8_t label9[] = {
+	0x63,0x6C,0x69,0x65,0x6E,0x74,0x20,0x66,0x69,0x6E,0x69,0x73,
+	0x68,0x65,0x64
+};
+static const uint8_t seed9[] = {
+	0xB5,0xE6,0xC2,0x62,0x0A,0xDB,0xAB,0xAA,0x18,0x0A,0x3B,0x10,
+	0x54,0x42,0x9A,0x7D,0x26,0x0E,0x01,0x59,0x71,0x3C,0xCE,0xFD,
+	0xB5,0x5E,0xE4,0xD8,0x52,0x15,0xED,0xC6
+};
+static const uint8_t prfout9[] = {
+	0x95,0xC6,0x2A,0x65,0x82,0xF0,0xA4,0xA9,0x7E,0xB7,0xAB,0xB7,
+	0xCE,0x2E,0x84,0x5A,0xD7,0x74,0x1E,0xE5,0x95,0x49,0x65,0x4E,
+	0x7B,0xCB,0xBE,0xD2,0x35,0xB2,0xAF,0xD6,0xD6,0x45,0xF2,0xD6,
+	0xAF,0xD3,0x4D,0x48,0xF8,0x56,0xDB,0x5E,0x5C,0x8B,0x5A,0x8C,
+	0xDC,0x1D,0x6E,0xF3,0x65,0x09,0x18,0x08,0x7A,0x83,0x3A,0x31,
+	0x96,0xFC,0x98,0xF4,0x9A,0xEF,0xC6,0xDB,0xF0,0x23,0x4B,0xA1,
+	0x09,0xF6,0x34,0x80,0x91,0xDB,0x07,0x5E,0x70,0x53,0x1A,0x9F,
+	0x18,0x30,0x14,0x0E,0x1A,0x5B,0xD7,0x33,0x2C,0xEE,0x36,0x1C,
+	0xF0,0x54,0x31,0xF1,0xA7,0x47,0x3F,0xEB,0x56,0xEF,0x7C,0x89,
+	0xFB,0xEB,0xEC,0xF8,0xDA,0x4D,0x48,0xF6,0x38,0x56,0x15,0x4A,
+	0x90,0xBB,0xCB,0x6A,0x9F,0x11,0x71,0xE6,0xEB,0xDE,0x86,0xB6,
+	0x60,0xA0,0xE5
+};
+
+/* Test Vector #10: generating 127 bytes with SHA-512 */
+#define SECRET10_SIZE	48
+#define LABEL10_SIZE	13
+#define SEED10_SIZE		32
+#define PRFOUT10_SIZE	127
+#define SHA_ID10		E_SHA512
+static const uint8_t secret10[] = {
+	0x87,0x19,0x2A,0x1A,0x9A,0x1D,0x62,0x5C,0x8A,0x84,0x69,0x3B,
+	0xCD,0x8C,0xA1,0x71,0x38,0xEA,0x36,0x66,0x63,0x06,0xAE,0x2C,
+	0x0F,0xD6,0x83,0xC4,0x66,0xFD,0x5F,0x76,0x5F,0x5F,0x88,0x95,
+	0x04,0xD6,0x83,0x5F,0xC3,0x16,0xCB,0x00,0x7E,0x9A,0x09,0x8A
+};
+static const uint8_t label10[] = {
+	0x6B,0x65,0x79,0x20,0x65,0x78,0x70,0x61,0x6E,0x73,0x69,0x6F,
+	0x6E
+};
+static const uint8_t seed10[] = {
+	0xBA,0x3D,0xEC,0x17,0x78,0x84,0xA5,0x25,0x97,0xCC,0xF9,0xCA,
+	0xD4,0xC8,0xE3,0x1D,0x88,0xFF,0xFA,0xDE,0x2D,0x5B,0x26,0x4F,
+	0x64,0x53,0xF1,0xF4,0xB7,0xDF,0x98,0x84
+};
+static const uint8_t prfout10[] = {
+	0xA9,0x1F,0x35,0x36,0x96,0x71,0x10,0x6A,0xD4,0x14,0x62,0xC1,
+	0x89,0x2C,0x8B,0x6E,0xBA,0x55,0x04,0xC1,0x2B,0xE5,0x16,0xB5,
+	0xBC,0x3A,0xFD,0x63,0x2A,0xB0,0x60,0x73,0x91,0x9D,0x5C,0x36,
+	0xFE,0xFA,0x01,0xCB,0xE8,0x22,0xD2,0xF7,0x03,0x2E,0x9D,0xCF,
+	0x38,0xD8,0xC3,0x65,0x42,0x7F,0x34,0x87,0xB8,0x51,0x15,0xB8,
+	0x97,0xE4,0x2E,0xBF,0xBC,0x84,0xAC,0xFB,0xB3,0x43,0x5D,0x1E,
+	0xEF,0xDF,0x70,0xA5,0xD7,0x18,0xF0,0xC3,0x5A,0x3E,0xFD,0xCF,
+	0x03,0xEF,0x7B,0x12,0xB2,0xCB,0xD3,0xFD,0x52,0xF6,0xE5,0xD0,
+	0xBC,0x0E,0x4C,0x69,0x67,0x41,0xA8,0x01,0xEA,0x9A,0xA3,0x5F,
+	0x11,0x1D,0x29,0xE3,0xE9,0xC3,0xA4,0x37,0x0E,0x0A,0xB5,0x59,
+	0x38,0x73,0xA6,0xAD,0x22,0xB1,0xD6
+};
+
+/* Test Vector #11: generating 189 bytes with SHA-512 */
+#define SECRET11_SIZE	48
+#define LABEL11_SIZE	13
+#define SEED11_SIZE		32
+#define PRFOUT11_SIZE	189
+#define SHA_ID11		E_SHA512
+static const uint8_t secret11[] = {
+	0x75,0x56,0x21,0xC8,0xA0,0x18,0xEB,0x1B,0xAF,0xE5,0xE5,0x9A,
+	0xDC,0x6B,0x50,0xE9,0x47,0x88,0xFA,0x48,0x87,0x2D,0x21,0x26,
+	0x18,0xCD,0x7E,0x05,0x95,0xA0,0xD3,0x04,0x6E,0x2E,0x7B,0x94,
+	0x81,0x20,0xC9,0x76,0xA4,0xE1,0x2E,0x52,0x78,0x62,0x93,0x2E
+};
+static const uint8_t label11[] = {
+	0x6D,0x61,0x73,0x74,0x65,0x72,0x20,0x73,0x65,0x63,0x72,0x65,
+	0x74
+};
+static const uint8_t seed11[] = {
+	0x01,0x59,0x68,0x0E,0xF4,0x4C,0xE5,0xAA,0xE2,0x3A,0x1C,0xF2,
+	0xD5,0xA6,0x70,0x52,0x85,0xEA,0x5E,0x77,0x4F,0x6F,0x5E,0xE6,
+	0x69,0x66,0xAC,0x3F,0x55,0x7B,0x44,0xBC
+};
+static const uint8_t prfout11[] = {
+	0x28,0x57,0xC3,0xCC,0x46,0x37,0xDE,0xB4,0xD3,0xCB,0x36,0xA6,
+	0x44,0xC1,0xE9,0xFD,0x9B,0xBE,0xF8,0x4B,0x6D,0xEF,0x8B,0xDF,
+	0xF5,0x8F,0x43,0x6B,0xDA,0xCB,0xC7,0x7C,0x3D,0x0E,0xA3,0xB9,
+	0xDE,0x61,0x38,0xE6,0x4D,0x69,0xE6,0x68,0xB9,0xE7,0x8C,0x5E,
+	0xB7,0x5E,0x4E,0x0C,0x44,0x26,0xC6,0xBA,0x96,0x3B,0x8A,0x34,
+	0xAD,0xC8,0x9C,0x4C,0x80,0x41,0xE4,0xE3,0x7F,0x92,0xA1,0xCE,
+	0x4A,0xE3,0x20,0xC6,0xA1,0xC0,0x20,0xF2,0xD7,0xBD,0x09,0xD8,
+	0xC4,0xC6,0xFC,0xB4,0xDE,0xD3,0xF2,0x43,0x4A,0xF2,0x27,0x9D,
+	0xAB,0xEE,0x7C,0x16,0xB4,0xB3,0xD2,0xDE,0x68,0xB3,0xC6,0x4C,
+	0x4C,0x40,0x8A,0xCD,0x70,0x97,0x4F,0x70,0x1D,0x9D,0x2C,0x73,
+	0xEF,0x67,0x06,0x21,0x83,0x9E,0xD8,0x9A,0x42,0x19,0x9B,0x64,
+	0x39,0x9C,0x2C,0x5E,0xB1,0x7F,0x2C,0xBA,0x2D,0x8B,0xAA,0x5D,
+	0x3D,0xC0,0x5B,0x6B,0xE2,0x03,0x89,0x29,0xA8,0x48,0x8D,0x04,
+	0x42,0x94,0x1F,0x57,0x1D,0x86,0xD0,0xC4,0x11,0xC0,0x9F,0x56,
+	0x3B,0xA8,0x02,0x8F,0x99,0xDB,0xF4,0x82,0x23,0x88,0x67,0x58,
+	0x88,0xD5,0x7E,0x09,0x35,0x05,0x13,0x95,0x5A
+};
+
+/* Test Vector #12: generating 61 bytes with SHA-384 */
+#define SECRET12_SIZE	48
+#define LABEL12_SIZE	13
+#define SEED12_SIZE		32
+#define PRFOUT12_SIZE	61
+#define SHA_ID12		E_SHA384
+static const uint8_t secret12[] = {
+	0xDE,0x51,0x0C,0xE6,0x8F,0x59,0x93,0xC5,0x0E,0x89,0xF7,0x0E,
+	0xBA,0xAD,0x61,0x66,0xA9,0xF7,0x0E,0xE8,0x74,0x50,0x8F,0xE7,
+	0x87,0x89,0xEE,0x8C,0xF0,0x76,0xED,0xE4,0x61,0x55,0x50,0xE4,
+	0x36,0xCF,0x3F,0x80,0x2C,0xE7,0xE8,0xC0,0x90,0x1F,0x27,0x60
+};
+static const uint8_t label12[] = {
+	0x6D,0x61,0x73,0x74,0x65,0x72,0x20,0x73,0x65,0x63,0x72,0x65,
+	0x74
+};
+static const uint8_t seed12[] = {
+	0x07,0x11,0x43,0xBA,0xA5,0x27,0xFE,0x62,0x7A,0xF6,0xAA,0xBA,
+	0x45,0x80,0x66,0xA6,0x9C,0xCF,0x6A,0xAA,0x50,0xF2,0xDC,0x68,
+	0x3F,0x14,0x0D,0xC6,0x4D,0x51,0x93,0x19
+};
+static const uint8_t prfout12[] = {
+	0x68,0xAA,0x4A,0x85,0xD6,0xEE,0xA5,0x6E,0xF1,0xD4,0xF6,0x86,
+	0xC1,0x58,0x33,0x4E,0xA6,0x7C,0xB8,0x76,0x8F,0x77,0xE3,0xDE,
+	0x60,0x3B,0x83,0x0F,0xF7,0x9B,0xE9,0xA4,0x88,0x35,0x73,0x2C,
+	0x0D,0xB7,0x54,0xC8,0x97,0x4D,0x2C,0x84,0x01,0xF9,0xF7,0x8A,
+	0x51,0xA8,0x1E,0x7D,0x66,0xBC,0xCF,0x1E,0x57,0x51,0x87,0x82,
+	0x73
+};
+
+/* Test Vector #13: generating 232 bytes with SHA-384 */
+#define SECRET13_SIZE	32
+#define LABEL13_SIZE	13
+#define SEED13_SIZE		64
+#define PRFOUT13_SIZE	232
+#define SHA_ID13		E_SHA384
+static const uint8_t secret13[] = {
+	0x22,0x1F,0xF0,0x0A,0xE3,0xAE,0xAF,0xEA,0xA1,0x63,0x5B,0x23,
+	0x62,0xCB,0xB5,0xCE,0x5E,0x93,0x34,0xC9,0x7A,0xFF,0xE9,0x5A,
+	0x0A,0xC5,0x7C,0x62,0x5B,0x2F,0x3B,0x69
+};
+static const uint8_t label13[] = {
+	0x6B,0x65,0x79,0x20,0x65,0x78,0x70,0x61,0x6E,0x73,0x69,0x6F,
+	0x6E
+};
+static const uint8_t seed13[] = {
+	0xAC,0x84,0xE2,0xE5,0x40,0xAC,0x6E,0x75,0x69,0x26,0x4B,0x8E,
+	0x92,0xD7,0x00,0x5A,0x2B,0x3A,0x01,0xEB,0xAC,0xF1,0xC0,0x83,
+	0x95,0x23,0x31,0xA5,0x0C,0x68,0x25,0x1E,0x5F,0x34,0xFD,0x75,
+	0x38,0x3D,0xF9,0x1A,0x86,0x18,0x60,0xDF,0x62,0xBC,0x79,0xF4,
+	0x5F,0xE0,0x06,0xB3,0x89,0x61,0xE3,0x69,0x72,0x4A,0x5D,0x2B,
+	0x18,0x27,0x41,0x00
+};
+static const uint8_t prfout13[] = {
+	0x13,0x71,0x69,0xE2,0x61,0x9C,0x8C,0x17,0x3E,0x7D,0xDD,0x28,
+	0x17,0x46,0xC1,0x75,0xB2,0x89,0x82,0xF6,0x33,0xAA,0x8F,0x48,
+	0x00,0x81,0xA8,0x06,0x6F,0xBC,0x87,0x08,0xE9,0x84,0xDA,0xD3,
+	0x25,0xEC,0x1C,0x71,0x72,0x44,0xAC,0x55,0xAA,0x97,0x9A,0xEB,
+	0xE2,0x55,0xDE,0x64,0x5B,0xA2,0x61,0xD6,0xD0,0xC3,0xDF,0xE8,
+	0xCC,0x98,0x15,0xCB,0x39,0xCA,0x3D,0xDB,0x4E,0x8D,0xF9,0x64,
+	0x5D,0x8E,0x74,0x2D,0x59,0x6A,0x6F,0x18,0xB0,0xAD,0xFD,0x12,
+	0x38,0xF7,0x09,0x7E,0x41,0xFF,0x0E,0xB1,0x35,0x9C,0x59,0x04,
+	0x2B,0x81,0xBF,0x69,0x22,0x3C,0xC5,0xF6,0xDB,0x02,0x67,0xB7,
+	0x22,0x70,0x25,0x35,0x56,0xB2,0xB6,0x90,0x59,0xDE,0x12,0xCD,
+	0x77,0x81,0xC4,0x6F,0x22,0x4A,0x76,0x0D,0x34,0x0F,0x80,0x6A,
+	0xE2,0xC6,0x80,0xA1,0x98,0x71,0xDA,0xAA,0x06,0x64,0x2A,0x7C,
+	0x06,0xB2,0xEB,0x18,0x09,0xFD,0x95,0x9C,0xFD,0xA4,0x68,0x33,
+	0xB0,0x7B,0xA6,0x05,0xBB,0xE1,0xDB,0xBC,0x32,0x26,0xF3,0x84,
+	0xEC,0x5D,0xAA,0xFD,0xDE,0xB8,0x88,0xC1,0x1E,0x66,0x97,0xEB,
+	0xC2,0x23,0x17,0x45,0x91,0x35,0x06,0x5D,0x53,0x2F,0xFB,0xCA,
+	0x96,0xD4,0xA8,0x90,0x31,0x5D,0x23,0x6C,0x45,0xE0,0x04,0x63,
+	0xD9,0x8F,0x91,0x16,0x75,0x0E,0x3E,0x5F,0xB0,0xBC,0xCD,0xE7,
+	0x4E,0xCA,0x2C,0x5B,0x7E,0x1C,0x3A,0xC5,0x48,0xCD,0xDD,0x22,
+	0xD2,0x8B,0x83,0x80
+};
+
+/* Test Vector #14: generating 96 bytes with SHA-256 */
+#define SECRET14_SIZE	48
+#define LABEL14_SIZE	13
+#define SEED14_SIZE		48
+#define PRFOUT14_SIZE	96
+#define SHA_ID14		E_SHA256
+static const uint8_t secret14[] = {
+	0xB0,0x74,0xEF,0xD8,0xDF,0xB0,0x84,0xD5,0x3B,0x0A,0xE9,0x26,
+	0xE3,0xD6,0x1D,0xF7,0xF3,0xB5,0xF3,0xE4,0xC5,0x8B,0x8B,0x01,
+	0xCB,0xEA,0x40,0xDA,0x55,0x68,0x65,0xDC,0x2D,0xB2,0xF6,0x5F,
+	0xB1,0x5A,0x2F,0x91,0xB1,0x36,0x04,0xBD,0x5D,0x40,0x99,0xF2
+};
+static const uint8_t label14[] = {
+	0x6D,0x61,0x73,0x74,0x65,0x72,0x20,0x73,0x65,0x63,0x72,0x65,
+	0x74
+};
+static const uint8_t seed14[] = {
+	0xB5,0x99,0xA1,0xD2,0xB5,0x55,0xFB,0xF4,0x90,0xA7,0x00,0x02,
+	0x62,0x2F,0x2C,0xCD,0xD4,0xB7,0x47,0xB7,0x1D,0x93,0xAC,0x37,
+	0x53,0x83,0x08,0xE0,0x6D,0x7F,0x78,0x5F,0xF3,0x83,0x2B,0x5C,
+	0xB0,0xD1,0x44,0x81,0x01,0x47,0xEA,0x76,0xCF,0x63,0x00,0x4F
+};
+static const uint8_t prfout14[] = {
+	0x90,0xAE,0xEE,0x32,0x42,0x65,0xE1,0x3F,0x29,0x10,0x41,0xB7,
+	0x95,0x33,0xAD,0xB9,0xB5,0x3F,0x5E,0x93,0x10,0x42,0x8A,0x31,
+	0x30,0x3A,0x49,0x6F,0x6E,0x8F,0xD1,0xD2,0x18,0xF7,0xAF,0x7A,
+	0xCF,0xEE,0x30,0x3B,0x00,0x20,0x3A,0x46,0x08,0x48,0xEC,0x40,
+	0xD1,0xB5,0x7C,0x93,0x0B,0x22,0xE0,0x6A,0x03,0xE0,0x85,0x8F,
+	0x36,0x64,0x76,0x18,0x2A,0xBC,0xF5,0x81,0xC5,0x33,0xDE,0x80,
+	0x5F,0x24,0x39,0xED,0x9C,0x2D,0x8C,0x82,0x67,0x98,0x08,0xA6,
+	0x57,0x18,0xC9,0xCF,0x33,0x9F,0x6E,0xE3,0x62,0x4A,0xA2,0x05
+};
+
+/* Test Vector #15: generating 203 bytes with SHA-384 */
+#define SECRET15_SIZE	36
+#define LABEL15_SIZE	15
+#define SEED15_SIZE		48
+#define PRFOUT15_SIZE	203
+#define SHA_ID15		E_SHA384
+static const uint8_t secret15[] = {
+	0x0D,0xC8,0x5E,0x62,0xA1,0x43,0xBE,0x82,0x01,0x04,0xDF,0xB9,
+	0x91,0x43,0x87,0xD0,0x0A,0x93,0x38,0xCB,0x7D,0x95,0x1C,0x96,
+	0x08,0x5C,0xE5,0x13,0x96,0x0D,0x93,0xAE,0xCE,0xF1,0x1E,0xC1
+};
+static const uint8_t label15[] = {
+	0x73,0x65,0x72,0x76,0x65,0x72,0x20,0x66,0x69,0x6E,0x69,0x73,
+	0x68,0x65,0x64
+};
+static const uint8_t seed15[] = {
+	0xF9,0xC8,0x3B,0xC1,0x01,0x60,0x0A,0xEC,0xA6,0x85,0xF3,0x75,
+	0x97,0xCE,0x98,0xFB,0x75,0xE3,0x1D,0xA2,0x19,0x4A,0xAC,0xC3,
+	0x35,0x94,0x68,0x69,0x3A,0x83,0x78,0x81,0x2D,0x27,0xB6,0x50,
+	0xE7,0xDC,0x35,0x96,0x0B,0x48,0xF1,0x97,0xE0,0xC0,0xD3,0x35
+};
+static const uint8_t prfout15[] = {
+	0xD3,0x6A,0x8A,0xC7,0xC8,0x05,0x53,0x22,0xD3,0xBC,0x14,0x21,
+	0x8A,0xCD,0x96,0x28,0x04,0xE3,0xC0,0x8F,0xFD,0xE5,0x60,0x03,
+	0xD8,0x45,0x55,0x35,0x11,0x35,0x8A,0x5A,0x4D,0xC9,0xA5,0xBB,
+	0x91,0x49,0x7B,0xFE,0x4B,0x52,0xCC,0xB7,0xD0,0xA7,0xC4,0x5C,
+	0xEA,0x7B,0x29,0x46,0x07,0xA0,0xE6,0x38,0x87,0x83,0xEB,0xAF,
+	0xFA,0x07,0x06,0x20,0xB6,0x81,0x6D,0x90,0x2D,0xAE,0xAF,0xA8,
+	0xD0,0x89,0xC0,0x49,0x17,0xA2,0x16,0x45,0xA8,0x7C,0xFE,0x02,
+	0xC3,0x3D,0x1E,0x54,0x65,0x54,0xC0,0xC2,0x7F,0x2B,0x7B,0x7B,
+	0x31,0xBE,0x91,0x30,0x9A,0x53,0x91,0xEC,0x00,0x60,0xF2,0xFF,
+	0x4A,0x57,0x71,0x96,0x28,0xE4,0xBD,0xAF,0x35,0x2B,0x15,0xFB,
+	0x53,0x10,0x8B,0xD9,0x43,0x09,0xEA,0x41,0x3D,0xB4,0x18,0x1D,
+	0x75,0x93,0x9B,0xD1,0x78,0x9B,0x2A,0xF5,0x8C,0x63,0x2A,0x08,
+	0xD4,0xAE,0xDB,0x57,0x57,0x7E,0xEF,0xD1,0x3E,0x74,0xEE,0x39,
+	0x52,0x3A,0x38,0x85,0xC4,0xAA,0xB2,0xC7,0x1D,0x30,0x1F,0x7F,
+	0x69,0x20,0x3D,0x92,0x5C,0xBE,0x3E,0xFD,0x4F,0xF8,0xFE,0xC4,
+	0xE6,0x00,0x92,0xA1,0x23,0xB6,0xE4,0x70,0xE6,0x0C,0x1F,0xD2,
+	0x80,0x43,0x2C,0xB0,0x0F,0x1D,0xB4,0x19,0x8E,0x01,0x86
+};
+
+/* Test Vector #16: generating 15 bytes with SHA-256 */
+#define SECRET16_SIZE	48
+#define LABEL16_SIZE	15
+#define SEED16_SIZE		48
+#define PRFOUT16_SIZE	15
+#define SHA_ID16		E_SHA256
+static const uint8_t secret16[] = {
+	0x18,0x3F,0x70,0xAB,0xE4,0x14,0xA3,0x74,0x83,0xE1,0x23,0x6B,
+	0x12,0x8C,0xED,0x2B,0x64,0xD5,0x58,0x39,0xF6,0x14,0x16,0x9C,
+	0xF5,0x37,0x79,0xAD,0x74,0x65,0x2B,0xA4,0xA1,0xA5,0x5B,0xD5,
+	0x77,0x5B,0xFA,0x8F,0xE2,0x80,0xC7,0x9E,0x86,0xE5,0x63,0x9F
+};
+static const uint8_t label16[] = {
+	0x73,0x65,0x72,0x76,0x65,0x72,0x20,0x66,0x69,0x6E,0x69,0x73,
+	0x68,0x65,0x64
+};
+static const uint8_t seed16[] = {
+	0x88,0xF4,0x24,0x36,0xB1,0xBF,0x35,0x48,0x99,0x2A,0x7D,0xC6,
+	0x23,0x22,0x5C,0x45,0x6F,0xA6,0xD2,0xE9,0x20,0x15,0x18,0xE1,
+	0xF3,0xC5,0x49,0xD5,0x0A,0xAC,0xE0,0x80,0x2D,0xBA,0x88,0x81,
+	0x89,0xA0,0x07,0x07,0x63,0x01,0xE0,0x32,0xA7,0x05,0x41,0x9A
+};
+static const uint8_t prfout16[] = {
+	0x10,0xF4,0x27,0xB0,0xA5,0x95,0xF6,0xF8,0xC6,0xD9,0xFA,0x4F,
+	0x10,0xCA,0x54
+};
+
+/* Test Vector #17: generating 103 bytes with SHA-256 */
+#define SECRET17_SIZE	58
+#define LABEL17_SIZE	13
+#define SEED17_SIZE		64
+#define PRFOUT17_SIZE	103
+#define SHA_ID17		E_SHA256
+static const uint8_t secret17[] = {
+	0x6D,0xE2,0x6A,0x71,0x6C,0x7B,0x21,0xC2,0x25,0xA4,0x0E,0x6C,
+	0x7B,0xBB,0xCE,0xFB,0xED,0xEE,0xB5,0x37,0x6C,0x5B,0xF7,0xFB,
+	0x3E,0xC3,0x19,0x6F,0xB2,0x14,0x2F,0x37,0xFE,0x64,0x19,0x44,
+	0xC2,0x52,0x0B,0x1A,0xF4,0x2C,0x30,0x14,0x9E,0xB5,0x1A,0xDA,
+	0xBA,0xD9,0x81,0x5A,0xC2,0xE3,0x42,0x1B,0x1F,0x99
+};
+static const uint8_t label17[] = {
+	0x6D,0x61,0x73,0x74,0x65,0x72,0x20,0x73,0x65,0x63,0x72,0x65,
+	0x74
+};
+static const uint8_t seed17[] = {
+	0xBE,0x82,0x03,0xFE,0x51,0xD0,0xF3,0xF2,0x0C,0x99,0x15,0x50,
+	0x9A,0xED,0x02,0xD8,0xFB,0xF3,0xC3,0x49,0xE3,0x78,0x39,0x77,
+	0xC4,0x22,0xDE,0x02,0x34,0xC7,0x81,0x4A,0x0A,0x7C,0x40,0x4F,
+	0xF0,0xD1,0xE0,0xE3,0x89,0xAC,0x01,0xED,0xA3,0x4A,0x8D,0x98,
+	0x96,0x6F,0x34,0x7E,0xD2,0xC6,0x75,0xFE,0x03,0xF5,0x1B,0x9C,
+	0x79,0x47,0x99,0x0B
+};
+static const uint8_t prfout17[] = {
+	0xF4,0x79,0xB8,0xBA,0xE8,0x62,0xDF,0x12,0x9F,0x9B,0x9D,0x7C,
+	0x78,0x27,0xD1,0x11,0x6B,0x54,0x90,0x50,0x9D,0x2B,0xDF,0x2C,
+	0x55,0x0D,0x76,0x37,0xA9,0x96,0x89,0x3B,0xEB,0xDC,0xCC,0x8D,
+	0xE5,0xCE,0x82,0xDD,0x5A,0x89,0xA4,0x2A,0xA3,0xA7,0x39,0x3C,
+	0x54,0x47,0x20,0xF4,0x8B,0xDD,0x41,0x89,0xA4,0xD4,0x35,0x89,
+	0xE6,0xD0,0x3C,0xE2,0x62,0x65,0x8A,0x93,0x26,0xEB,0x5B,0x7D,
+	0xC4,0x57,0x88,0xC0,0xFE,0x4B,0x61,0x98,0x35,0xE1,0x2E,0xEC,
+	0x87,0xC8,0x5E,0x1F,0xD6,0xAF,0x48,0xFE,0x31,0xD0,0x28,0xBE,
+	0xF2,0x23,0x93,0x15,0xF2,0xAB,0x83
+};
+
+/* Test Vector #18: generating 138 bytes with SHA-384 */
+#define SECRET18_SIZE	48
+#define LABEL18_SIZE	15
+#define SEED18_SIZE		32
+#define PRFOUT18_SIZE	138
+#define SHA_ID18		E_SHA384
+static const uint8_t secret18[] = {
+	0xEC,0xFD,0x88,0xD5,0x2F,0x47,0x43,0x3D,0x7A,0x3A,0x5C,0x09,
+	0x28,0x82,0x31,0xF9,0x43,0x96,0x04,0x2A,0x0E,0x3E,0xC5,0x5E,
+	0x76,0x54,0x7A,0x40,0xB0,0xBB,0x28,0x2E,0x88,0xE7,0x97,0x3B,
+	0x2F,0xEB,0x07,0x23,0x7F,0x14,0xAD,0x94,0x70,0x07,0x14,0x75
+};
+static const uint8_t label18[] = {
+	0x73,0x65,0x72,0x76,0x65,0x72,0x20,0x66,0x69,0x6E,0x69,0x73,
+	0x68,0x65,0x64
+};
+static const uint8_t seed18[] = {
+	0x66,0x43,0x61,0xF7,0x12,0x5A,0x3F,0x04,0x86,0x57,0x59,0x65,
+	0xD9,0x61,0x78,0x08,0xE8,0xAC,0x0E,0x0C,0x42,0x33,0x23,0x1A,
+	0xD9,0x21,0xB8,0xA1,0x9B,0x47,0x22,0x6F
+};
+static const uint8_t prfout18[] = {
+	0x3B,0xC1,0xCE,0x4E,0x74,0x14,0x18,0xA2,0x57,0x1D,0xB6,0x7A,
+	0xAA,0x80,0x4C,0x40,0x8F,0x75,0x6C,0xB3,0x7A,0xD5,0x86,0x7E,
+	0xE0,0x3D,0x20,0x5D,0xE4,0x12,0x92,0x55,0xBA,0x7C,0x12,0xD3,
+	0xE8,0xD9,0x32,0x16,0xA8,0x5F,0x81,0x44,0x14,0x67,0x90,0x7B,
+	0x90,0x1E,0x7D,0xE8,0xA8,0x2F,0xF1,0x05,0xAB,0x2E,0x37,0x08,
+	0x83,0xDF,0x9A,0xD3,0x47,0xC4,0xD0,0xE1,0x50,0x06,0x83,0xCD,
+	0x4E,0x84,0x83,0xD8,0xFE,0xF5,0x2E,0x86,0x6F,0xB2,0xE1,0x75,
+	0x43,0xA4,0x53,0x6B,0x24,0xE7,0x06,0x0B,0x2C,0x84,0xF1,0x23,
+	0x8E,0x49,0xE6,0x33,0x92,0x40,0xDA,0xA9,0x20,0x20,0x48,0xD6,
+	0x9B,0x08,0xD8,0x07,0x54,0x0E,0x55,0x9C,0x23,0x21,0x23,0xAC,
+	0x96,0xDE,0x50,0x76,0xEC,0x99,0xD8,0xC6,0x89,0x2D,0x78,0xAE,
+	0x43,0x6A,0x87,0x94,0x90,0xB2
+};
+
+/* Test Vector #19: generating 160 bytes with SHA-384 */
+#define SECRET19_SIZE	32
+#define LABEL19_SIZE	13
+#define SEED19_SIZE		64
+#define PRFOUT19_SIZE	160
+#define SHA_ID19		E_SHA384
+static const uint8_t secret19[] = {
+	0xC5,0x93,0x05,0x60,0x11,0x76,0xC3,0xA2,0xFC,0xCA,0x93,0x91,
+	0x7A,0x98,0xDA,0x38,0xF8,0xF0,0xF4,0xCD,0x5D,0xDA,0x02,0x4E,
+	0x54,0xC6,0x85,0x94,0x02,0xAF,0xC8,0x7E
+};
+static const uint8_t label19[] = {
+	0x6D,0x61,0x73,0x74,0x65,0x72,0x20,0x73,0x65,0x63,0x72,0x65,
+	0x74
+};
+static const uint8_t seed19[] = {
+	0xAD,0x97,0x60,0xEE,0x61,0x38,0x12,0x7A,0x21,0x9D,0x40,0x48,
+	0xDD,0xDF,0x85,0xCF,0x7F,0x2C,0x1A,0xE6,0x1F,0xCF,0xF3,0x82,
+	0x89,0x6F,0x4F,0xEE,0x04,0xA0,0xE3,0x3E,0x92,0xBA,0x75,0x95,
+	0x88,0x6F,0xC6,0x98,0x2D,0xE9,0xD4,0xD4,0x12,0x96,0xA7,0x86,
+	0x69,0xD0,0xC8,0x3D,0x0C,0xC8,0x8A,0x9A,0x16,0x7C,0xE4,0xA3,
+	0xC1,0x51,0xA2,0x90
+};
+static const uint8_t prfout19[] = {
+	0x25,0x8E,0x56,0xC7,0xE5,0x13,0xBD,0x32,0x27,0xA3,0xCB,0x3B,
+	0x44,0x42,0x2B,0xC0,0x93,0xED,0x3C,0x3A,0x77,0x9B,0x4D,0x52,
+	0x6D,0xEE,0x8A,0x86,0x39,0x72,0x88,0x85,0xE7,0xF3,0x24,0x24,
+	0x4B,0xBF,0xBA,0x2D,0x60,0xE4,0x86,0x93,0x4A,0x2A,0x60,0xC7,
+	0x31,0xAB,0x9C,0x43,0xAA,0xFE,0xDC,0x83,0x18,0x98,0x37,0x27,
+	0x63,0xDC,0x2C,0x3A,0x1E,0x67,0x92,0x60,0xC2,0x81,0x8E,0x04,
+	0x8D,0xF5,0x9A,0x92,0x39,0x91,0xB8,0x8D,0x81,0xA0,0xD8,0xE8,
+	0x43,0x16,0x53,0x70,0x21,0x89,0x7F,0x94,0x24,0x3A,0x07,0x0C,
+	0x8E,0xB0,0x0E,0x74,0xB8,0x8C,0x85,0xFF,0x50,0xAA,0x09,0xC1,
+	0x83,0x98,0x8A,0x48,0x03,0xB6,0x97,0x32,0x5E,0xE2,0x26,0x76,
+	0x1E,0xB7,0xF0,0x98,0xBE,0x95,0x1B,0x54,0xAC,0x94,0x7E,0x5E,
+	0x64,0xE9,0xF0,0xCF,0xAA,0x03,0x1A,0xA4,0xA4,0xD7,0xE6,0x27,
+	0x4A,0x42,0x0F,0xD8,0xE1,0x72,0xF8,0x24,0x5E,0xDA,0xE7,0x6A,
+	0x8C,0x4B,0xC2,0x3D
+};
+
+/* Test Vector #20: generating 44 bytes with SHA-512 */
+#define SECRET20_SIZE	32
+#define LABEL20_SIZE	15
+#define SEED20_SIZE		64
+#define PRFOUT20_SIZE	44
+#define SHA_ID20		E_SHA512
+static const uint8_t secret20[] = {
+	0xFC,0x92,0xE2,0x5B,0xFB,0x93,0x7B,0x04,0x71,0x25,0x01,0x23,
+	0xD0,0x11,0x35,0x35,0xB8,0x8B,0x79,0x46,0x12,0xA5,0x64,0x03,
+	0x86,0xD1,0x26,0x79,0xCD,0x19,0x36,0x58
+};
+static const uint8_t label20[] = {
+	0x73,0x65,0x72,0x76,0x65,0x72,0x20,0x66,0x69,0x6E,0x69,0x73,
+	0x68,0x65,0x64
+};
+static const uint8_t seed20[] = {
+	0xFA,0xF9,0xCE,0x8C,0x08,0xD1,0x6B,0x07,0x1C,0x25,0x7F,0x08,
+	0x0E,0xBF,0xE6,0xA5,0xE9,0xA0,0x50,0xF4,0xD1,0x5E,0x81,0x56,
+	0xE4,0xC8,0x77,0x3C,0x20,0x9C,0x19,0xE7,0x65,0x15,0xFE,0x2A,
+	0x85,0xDD,0xD4,0x05,0x79,0x2E,0x5B,0x4E,0xE9,0x6C,0x2D,0xDE,
+	0x28,0x2B,0xF0,0x16,0xB6,0x5F,0x6F,0xE5,0xD3,0x1B,0xCE,0x84,
+	0xBF,0xA5,0x23,0x36
+};
+static const uint8_t prfout20[] = {
+	0x00,0x2D,0xC3,0x10,0x18,0x72,0x47,0x21,0x47,0xC4,0xA7,0xF6,
+	0x9F,0xA0,0x60,0x3A,0x13,0x81,0x4C,0x56,0xC0,0xDA,0x9B,0xDC,
+	0x02,0xD5,0xD7,0xEF,0xCD,0x13,0xF9,0x0A,0x22,0x7E,0xEA,0x2A,
+	0xA7,0x65,0x67,0x89,0xD5,0x76,0xBA,0x1E
+};
+
+/* Test Vector #21: generating 37 bytes with SHA-512 */
+#define SECRET21_SIZE	48
+#define LABEL21_SIZE	15
+#define SEED21_SIZE		48
+#define PRFOUT21_SIZE	37
+#define SHA_ID21		E_SHA512
+static const uint8_t secret21[] = {
+	0x41,0x64,0x59,0xB3,0xA2,0xA5,0x58,0x5F,0x26,0x9D,0x2F,0x18,
+	0xB4,0xD0,0x56,0x0A,0xAD,0xD7,0x05,0xA3,0x53,0x34,0x07,0x6E,
+	0x4C,0xB8,0xC3,0x6A,0x14,0x48,0xD0,0xB3,0x21,0x33,0xEB,0xC4,
+	0x22,0x09,0x68,0xBD,0xD4,0x21,0x23,0x1E,0x8A,0xB4,0x1F,0x7E
+};
+static const uint8_t label21[] = {
+	0x63,0x6C,0x69,0x65,0x6E,0x74,0x20,0x66,0x69,0x6E,0x69,0x73,
+	0x68,0x65,0x64
+};
+static const uint8_t seed21[] = {
+	0x5E,0x9A,0xE0,0xF1,0x6D,0x09,0x59,0xBA,0xCA,0x5F,0x9F,0xB2,
+	0x72,0xF2,0xA7,0x67,0x94,0xE9,0xD4,0xCC,0xE3,0x56,0x16,0xBE,
+	0x48,0xC4,0x78,0x58,0xDF,0x31,0x42,0x10,0x79,0xF8,0x3C,0xFA,
+	0xB3,0x33,0x59,0xEC,0x2E,0xE8,0x5D,0x84,0x7C,0xF2,0x90,0x31
+};
+static const uint8_t prfout21[] = {
+	0x90,0x9E,0x1A,0x04,0x73,0xEC,0x3A,0x23,0x87,0x07,0x19,0x5D,
+	0xAB,0xD7,0xC7,0xCF,0x45,0xC1,0x3E,0xC3,0x57,0xC7,0xE1,0x8A,
+	0x8E,0x42,0x82,0xAF,0xC6,0x8F,0x71,0x2E,0x11,0x80,0xFE,0x26,
+	0x3D
+};
+
+/* Test Vector #22: generating 250 bytes with SHA-384 */
+#define SECRET22_SIZE	48
+#define LABEL22_SIZE	15
+#define SEED22_SIZE		48
+#define PRFOUT22_SIZE	250
+#define SHA_ID22		E_SHA384
+static const uint8_t secret22[] = {
+	0x60,0x4C,0xD1,0xED,0x29,0x89,0x1F,0x3E,0x1D,0xA8,0x97,0x9D,
+	0x11,0xB6,0x8A,0xF1,0xDB,0xDD,0x79,0x0D,0x1F,0x8F,0xBC,0xAF,
+	0x86,0x3A,0x6C,0xB4,0x14,0x38,0x7C,0xEF,0xE6,0xCD,0xB3,0xC2,
+	0x13,0x47,0x39,0xDE,0x7A,0xC3,0x0A,0x2E,0x26,0xB1,0x12,0x57
+};
+static const uint8_t label22[] = {
+	0x63,0x6C,0x69,0x65,0x6E,0x74,0x20,0x66,0x69,0x6E,0x69,0x73,
+	0x68,0x65,0x64
+};
+static const uint8_t seed22[] = {
+	0x1E,0x23,0xAC,0xED,0xF0,0x72,0xFE,0xA5,0x2F,0xC9,0xB1,0x18,
+	0x68,0x6A,0x05,0x26,0xE9,0xDC,0x9A,0x99,0xBF,0x8E,0x47,0xEF,
+	0x00,0xF4,0xA9,0xCF,0x30,0x9A,0x3A,0x83,0x64,0x6A,0xA5,0xDD,
+	0xA9,0x88,0x58,0x2E,0xD0,0x94,0x68,0x77,0xA1,0x3E,0xDE,0x77
+};
+static const uint8_t prfout22[] = {
+	0x3A,0xF8,0xA4,0xDD,0x2A,0x1A,0x64,0xED,0x05,0x63,0xDC,0xAC,
+	0x08,0x5C,0x3D,0xC7,0xC3,0xA4,0xAA,0x87,0x52,0x26,0xAB,0x64,
+	0x93,0x8F,0xEC,0x92,0x3F,0xDA,0x0B,0x00,0xF2,0xC1,0xBF,0xC8,
+	0x11,0x3D,0x4E,0xBD,0x1A,0x79,0x82,0xCD,0xCB,0x9F,0x82,0xAA,
+	0x26,0x8D,0xEE,0x2A,0xDF,0x80,0xF5,0x55,0xD0,0x5D,0xD4,0x02,
+	0x90,0x58,0x7C,0x06,0x0C,0x9A,0xAA,0xE7,0x84,0x75,0xC3,0xF9,
+	0x0D,0x7D,0x49,0xFD,0x33,0x0B,0x51,0x98,0x42,0x7C,0x5F,0xEA,
+	0x50,0xB4,0x75,0x91,0xE5,0xD6,0x8D,0x09,0xC0,0x5E,0x35,0x65,
+	0x36,0xFF,0x38,0xBC,0xB0,0xF3,0x19,0x4A,0x17,0x55,0x07,0x35,
+	0x05,0xD5,0x3B,0xAC,0xF6,0x26,0x31,0x8E,0xBB,0xAB,0x48,0xA4,
+	0x7B,0xD6,0x6B,0x1E,0xE6,0xBC,0x55,0xEB,0xDD,0x84,0xF1,0x00,
+	0x0C,0xD9,0x5E,0x04,0x56,0x51,0x3A,0x32,0x5F,0xB8,0x40,0xE8,
+	0xB9,0x85,0x0E,0x10,0xEE,0x71,0x71,0x8E,0xE5,0x81,0xD7,0x41,
+	0xD1,0xC9,0xE5,0x1E,0x87,0x36,0x90,0x34,0xB8,0x3C,0xD3,0xF4,
+	0x34,0xA2,0x44,0xA9,0x58,0x49,0x20,0x72,0xEC,0xCA,0x90,0x5B,
+	0x7C,0x7F,0x38,0x55,0xEB,0xB6,0xB0,0x25,0xAF,0xCF,0x4A,0xA0,
+	0x01,0xDD,0xAA,0xA4,0x2A,0xE9,0xCC,0x27,0xD8,0x87,0x47,0xAD,
+	0xB0,0xC3,0xFF,0x46,0x83,0x86,0xB0,0x4C,0xA1,0x67,0x9C,0xF9,
+	0x3D,0x28,0x6D,0xC9,0x59,0x64,0x51,0x53,0x2A,0x4B,0xCC,0x28,
+	0xF7,0x1F,0x25,0xAA,0x97,0xEB,0x96,0x24,0xF2,0x68,0xBC,0x13,
+	0x59,0x1B,0x7F,0xC0,0x14,0x6F,0x71,0x99,0xCF,0xC4
+};
+
+/* Test Vector #23: generating 131 bytes with SHA-512 */
+#define SECRET23_SIZE	48
+#define LABEL23_SIZE	15
+#define SEED23_SIZE		32
+#define PRFOUT23_SIZE	131
+#define SHA_ID23		E_SHA512
+static const uint8_t secret23[] = {
+	0x6F,0xC3,0xBE,0x4D,0xE0,0xFE,0x15,0xA9,0x76,0x9C,0xA2,0xF9,
+	0xAA,0x00,0x9E,0xAE,0x26,0x40,0x91,0x1B,0x35,0x74,0xA0,0x56,
+	0x56,0xEF,0xD6,0x7B,0xB1,0xAA,0xD7,0x76,0x8B,0xD4,0xB7,0xE3,
+	0x4F,0x3C,0x72,0xFD,0x4A,0x3D,0xB4,0x41,0x10,0xCE,0x6C,0xC0
+};
+static const uint8_t label23[] = {
+	0x73,0x65,0x72,0x76,0x65,0x72,0x20,0x66,0x69,0x6E,0x69,0x73,
+	0x68,0x65,0x64
+};
+static const uint8_t seed23[] = {
+	0x70,0xF7,0x5D,0x01,0x09,0xA5,0xA4,0xA4,0x67,0x28,0x72,0xF0,
+	0x90,0xBC,0x53,0x19,0x62,0xBE,0xF4,0xA3,0xC7,0xA3,0x8F,0x99,
+	0x14,0xCA,0xB7,0xCE,0x77,0xEA,0x63,0x9D
+};
+static const uint8_t prfout23[] = {
+	0x1A,0x65,0x56,0x00,0xF0,0xB5,0xD9,0xC2,0x5B,0xF2,0x58,0x02,
+	0x2C,0x03,0x19,0xEC,0x32,0x02,0x17,0x6C,0x31,0x39,0xFA,0x13,
+	0xAB,0x99,0x24,0x77,0x14,0xE8,0xC6,0x7D,0xEA,0x06,0xD5,0x31,
+	0x1C,0x90,0xBD,0x56,0xB0,0x1B,0xA4,0x3F,0xB9,0x28,0xEF,0x3A,
+	0x4B,0xE7,0xF2,0x51,0x7E,0xB2,0x04,0x80,0xD0,0x66,0x73,0xB8,
+	0xFE,0x1F,0xEC,0x30,0xD9,0xFD,0xB1,0x4A,0x66,0xFC,0x85,0x33,
+	0x43,0x1F,0x92,0x08,0x36,0x68,0x49,0x06,0x54,0xFD,0xFE,0x4E,
+	0x2E,0xB3,0x92,0xCB,0x90,0x7D,0x04,0xC2,0xFB,0xE7,0x41,0x1C,
+	0x40,0xBF,0x39,0x89,0xA2,0xF0,0x30,0x77,0x61,0xE7,0x6E,0xAB,
+	0xBC,0x10,0x93,0xC6,0xA2,0x9C,0x6A,0x9C,0xAC,0xE9,0x30,0x35,
+	0xFF,0x47,0xEB,0x01,0xDC,0x56,0xB9,0x98,0x20,0x4C,0x9C
+};
+
+/* Test Vector #24: generating 18 bytes with SHA-512 */
+#define SECRET24_SIZE	48
+#define LABEL24_SIZE	13
+#define SEED24_SIZE		32
+#define PRFOUT24_SIZE	18
+#define SHA_ID24		E_SHA512
+static const uint8_t secret24[] = {
+	0x84,0x2F,0x1F,0x58,0x40,0x68,0x6E,0x1B,0x73,0x46,0xD3,0x38,
+	0x63,0xCF,0x21,0xE0,0xA1,0xD5,0x3D,0x9B,0x1E,0x53,0xAC,0x30,
+	0x5D,0x08,0x46,0xD5,0xE2,0x22,0xD7,0xDF,0xCA,0x30,0x63,0x67,
+	0xB0,0x82,0x05,0x58,0xFE,0x95,0x37,0x31,0xCC,0x87,0x59,0xF5
+};
+static const uint8_t label24[] = {
+	0x6D,0x61,0x73,0x74,0x65,0x72,0x20,0x73,0x65,0x63,0x72,0x65,
+	0x74
+};
+static const uint8_t seed24[] = {
+	0xFB,0x4A,0xAD,0x63,0x44,0x31,0x4C,0x5C,0xFB,0x1C,0xDA,0xE9,
+	0xD5,0x4F,0x60,0x0C,0xC5,0x73,0x46,0x0C,0xF7,0x5F,0x71,0x11,
+	0x76,0xB1,0xE4,0xC5,0xD2,0xF9,0xF7,0x39
+};
+static const uint8_t prfout24[] = {
+	0xFF,0xD8,0xED,0x7E,0x25,0xBA,0x7F,0x53,0x8F,0xC9,0x4F,0xA3,
+	0x73,0x23,0xC0,0x6B,0xB8,0xB6
+};
+
+/* Test Vector #25: generating 61 bytes with SHA-384 */
+#define SECRET25_SIZE	32
+#define LABEL25_SIZE	15
+#define SEED25_SIZE		64
+#define PRFOUT25_SIZE	61
+#define SHA_ID25		E_SHA384
+static const uint8_t secret25[] = {
+	0x35,0xA3,0x7A,0x8D,0x4E,0x4E,0xFF,0xEC,0x85,0xB9,0x04,0xFF,
+	0x0A,0x00,0x44,0x28,0xF2,0xE6,0x24,0xA4,0x45,0x1B,0xE8,0x27,
+	0x03,0xB4,0x13,0xCF,0x1F,0x83,0x37,0x8F
+};
+static const uint8_t label25[] = {
+	0x73,0x65,0x72,0x76,0x65,0x72,0x20,0x66,0x69,0x6E,0x69,0x73,
+	0x68,0x65,0x64
+};
+static const uint8_t seed25[] = {
+	0x0A,0x1B,0x45,0xAF,0x39,0xFA,0x4E,0x76,0x26,0x13,0x85,0x3F,
+	0x90,0x53,0x51,0x11,0xA5,0xCE,0x03,0xC3,0xD3,0xC1,0xA4,0xCD,
+	0xBE,0x02,0xE3,0xF1,0xFC,0x0E,0x75,0x87,0xBC,0x7A,0x82,0xA0,
+	0x90,0x92,0x2B,0x54,0xDB,0xA8,0x38,0xB3,0x0C,0x63,0x48,0x7B,
+	0x0F,0xF6,0xBA,0x68,0xE9,0x0C,0x3C,0x32,0x42,0x98,0x70,0xB5,
+	0x9B,0x83,0x2F,0x59
+};
+static const uint8_t prfout25[] = {
+	0xAE,0x28,0xD4,0xFE,0x0A,0x35,0x31,0x70,0x49,0x05,0x2B,0xEA,
+	0xC7,0xE0,0xA4,0x17,0x19,0x89,0x27,0xB1,0x62,0xAA,0x14,0x2C,
+	0xEC,0x43,0x86,0x93,0xE5,0x38,0xC2,0xD6,0x91,0xD0,0x2C,0xC9,
+	0x5A,0x06,0x63,0xA2,0xFF,0x2A,0x36,0xBB,0xF8,0x58,0x7B,0x8E,
+	0xDF,0x0F,0x1F,0xEC,0xFC,0x8A,0x54,0x1F,0xBA,0xF0,0xEC,0x13,
+	0x35
+};
+
+/* Test Vector #26: generating 29 bytes with SHA-384 */
+#define SECRET26_SIZE	32
+#define LABEL26_SIZE	15
+#define SEED26_SIZE		64
+#define PRFOUT26_SIZE	29
+#define SHA_ID26		E_SHA384
+static const uint8_t secret26[] = {
+	0x63,0x8F,0x39,0x06,0x65,0xC1,0x09,0xA8,0xE2,0xB2,0x62,0x65,
+	0x0F,0x73,0xB3,0xFF,0xB4,0x5D,0x50,0x3C,0x1B,0xF4,0x18,0x76,
+	0xB8,0x2D,0xD3,0x3D,0x8F,0x24,0x74,0xB4
+};
+static const uint8_t label26[] = {
+	0x63,0x6C,0x69,0x65,0x6E,0x74,0x20,0x66,0x69,0x6E,0x69,0x73,
+	0x68,0x65,0x64
+};
+static const uint8_t seed26[] = {
+	0xAA,0x4E,0x62,0xB3,0xF7,0x25,0xF9,0x58,0x17,0x23,0xB3,0xDF,
+	0xC0,0xE0,0x99,0x2F,0xDD,0x7E,0x1D,0x16,0xC2,0x29,0x3A,0x38,
+	0x1F,0xE5,0xA3,0xA8,0x7C,0xC9,0xA2,0x2D,0x66,0x8F,0x57,0x8A,
+	0x78,0x1E,0xBB,0xC0,0x45,0x0D,0x6D,0xF1,0xEB,0xD2,0x70,0x1D,
+	0xDD,0xBF,0x88,0x56,0xBD,0xF1,0xFD,0x57,0x83,0x1C,0x85,0x15,
+	0x59,0xE6,0x70,0x0A
+};
+static const uint8_t prfout26[] = {
+	0x7B,0xA8,0x6E,0xBE,0xD7,0x7B,0xAE,0xE4,0xB6,0x37,0xE7,0x05,
+	0xEE,0xE1,0xD5,0x71,0x79,0xD3,0x4D,0x60,0x26,0x0A,0x75,0x06,
+	0xF7,0xEE,0xB3,0x3D,0x10
+};
+
+/* Test Vector #27: generating 112 bytes with SHA-256 */
+#define SECRET27_SIZE	48
+#define LABEL27_SIZE	15
+#define SEED27_SIZE		64
+#define PRFOUT27_SIZE	112
+#define SHA_ID27		E_SHA256
+static const uint8_t secret27[] = {
+	0xFD,0x43,0x1C,0xB5,0xAA,0xF4,0x9E,0x90,0xFB,0x3E,0x51,0x06,
+	0xC1,0xE1,0x2F,0xCF,0x6F,0xD3,0xFB,0x4F,0x0B,0x60,0x78,0xF9,
+	0x21,0x50,0x6F,0x3E,0xC1,0xB7,0xDF,0x24,0xD7,0x00,0xBE,0x23,
+	0x4B,0xD4,0x30,0x43,0x9B,0xC5,0x87,0xF5,0x4A,0x22,0x29,0x79
+};
+static const uint8_t label27[] = {
+	0x63,0x6C,0x69,0x65,0x6E,0x74,0x20,0x66,0x69,0x6E,0x69,0x73,
+	0x68,0x65,0x64
+};
+static const uint8_t seed27[] = {
+	0x63,0xEE,0x53,0x5A,0x1E,0x91,0x35,0x80,0x37,0xBC,0xCA,0x41,
+	0xCE,0xF6,0x61,0x62,0xAC,0x0E,0xD2,0xDA,0x54,0x89,0x80,0x76,
+	0x22,0x5A,0x86,0xE8,0xBB,0x43,0x4D,0x48,0x5F,0x7D,0x1B,0x71,
+	0x96,0x22,0x67,0x64,0xE4,0xDE,0x9B,0x1A,0xF3,0x28,0xBF,0x39,
+	0x87,0x52,0x1F,0x4C,0x39,0x49,0xF5,0x10,0x14,0xEB,0xFE,0x6B,
+	0x15,0x18,0x31,0x8D
+};
+static const uint8_t prfout27[] = {
+	0xDF,0xD0,0x64,0x5F,0xD7,0x03,0x81,0xCD,0x9B,0x73,0xB8,0xF8,
+	0x60,0xCF,0xCF,0x20,0x40,0x82,0x0F,0xFB,0x48,0x28,0x98,0x5D,
+	0x9A,0xEA,0x72,0x43,0x64,0xDB,0xBB,0x59,0x98,0x04,0xCD,0x22,
+	0x04,0xD1,0x62,0xDB,0x66,0xA5,0x65,0xB9,0x7D,0x5C,0xDD,0x82,
+	0xE5,0x6E,0xE4,0x30,0x36,0xFB,0x8E,0xEC,0x94,0x78,0x28,0xCD,
+	0x7C,0x68,0x53,0x2D,0xED,0x00,0x41,0x23,0x10,0xCB,0xD4,0x55,
+	0xA4,0xA4,0xAD,0xD9,0xA6,0x97,0x2E,0xE3,0x6C,0x7E,0x27,0xDA,
+	0x3A,0x84,0x2A,0xFE,0xA8,0xE9,0xE3,0x26,0xF8,0x90,0x44,0x7B,
+	0xE8,0x30,0xED,0x0B,0x1B,0x73,0xD6,0x20,0x7D,0x7B,0xB0,0x02,
+	0x73,0x7F,0xE6,0x45
+};
+
+/* Test Vector #28: generating 87 bytes with SHA-384 */
+#define SECRET28_SIZE	32
+#define LABEL28_SIZE	15
+#define SEED28_SIZE		64
+#define PRFOUT28_SIZE	87
+#define SHA_ID28		E_SHA384
+static const uint8_t secret28[] = {
+	0x10,0xC2,0xBF,0xE6,0xF6,0x84,0x85,0x69,0xF0,0xB4,0x98,0xED,
+	0x53,0xDA,0xC4,0x2A,0x1A,0x47,0xE8,0xD8,0x42,0xB1,0x9D,0x69,
+	0x69,0x4E,0x3C,0x0B,0x01,0x14,0xD0,0xAE
+};
+static const uint8_t label28[] = {
+	0x63,0x6C,0x69,0x65,0x6E,0x74,0x20,0x66,0x69,0x6E,0x69,0x73,
+	0x68,0x65,0x64
+};
+static const uint8_t seed28[] = {
+	0x83,0xCA,0x8D,0x6B,0xCB,0x8A,0x89,0x4A,0x6F,0xA7,0x3D,0x93,
+	0xF6,0x46,0xDE,0x6F,0xD4,0xA7,0x55,0xD3,0xFE,0xE9,0x22,0x94,
+	0x72,0x1A,0xB3,0xDA,0x81,0xF3,0xFF,0xA1,0x6C,0x54,0xBE,0x87,
+	0x11,0x53,0xC2,0x25,0xFD,0xFA,0xA1,0x95,0x0F,0x29,0x7F,0x89,
+	0x3F,0x77,0x41,0x31,0x13,0x8B,0xFF,0x58,0x8B,0xEA,0x5B,0x54,
+	0x28,0xB3,0x0F,0x03
+};
+static const uint8_t prfout28[] = {
+	0xE1,0xC0,0x8E,0xA9,0x7C,0x31,0x33,0x37,0xCA,0x5E,0x39,0x76,
+	0xE9,0x77,0x2B,0x3B,0x4E,0x7D,0x5D,0x17,0x72,0x8A,0xF4,0xFA,
+	0x1F,0xA0,0x6D,0xF7,0x24,0xA9,0x47,0x27,0xCA,0x2E,0x4F,0x54,
+	0x73,0xDD,0xDE,0x43,0xDB,0xD7,0x6B,0x01,0xA5,0xB8,0xD8,0x47,
+	0x64,0x21,0x0F,0xA0,0x03,0xD0,0xD3,0xBD,0x0E,0xFC,0x50,0x06,
+	0x69,0xE7,0xDB,0x02,0x19,0xEE,0xC4,0xD2,0xC2,0x6C,0xB1,0xEA,
+	0x62,0x0F,0x07,0x26,0xF3,0x94,0x4A,0xAD,0xD5,0x71,0x17,0x10,
+	0x3C,0x42,0x76
+};
+
+/* Test Vector #29: generating 87 bytes with SHA-384 */
+#define SECRET29_SIZE	53
+#define LABEL29_SIZE	13
+#define SEED29_SIZE		48
+#define PRFOUT29_SIZE	87
+#define SHA_ID29		E_SHA384
+static const uint8_t secret29[] = {
+	0x4B,0xDB,0x08,0xE8,0xB8,0xFE,0x4A,0xB4,0x33,0x70,0x55,0x65,
+	0xAE,0x65,0xF4,0x77,0x6D,0x2E,0x6D,0xAD,0xB1,0x91,0x24,0x7A,
+	0x16,0x7A,0x62,0xA8,0x3D,0xED,0x77,0x5B,0xD8,0xC3,0x3F,0x4D,
+	0xE6,0x5E,0x35,0x96,0x81,0xF4,0x42,0xDF,0xD8,0xD4,0x24,0x83,
+	0x8A,0x95,0xC9,0x89,0xDD};
+static const uint8_t label29[] = {
+	0x6B,0x65,0x79,0x20,0x65,0x78,0x70,0x61,0x6E,0x73,0x69,0x6F,
+	0x6E
+};
+static const uint8_t seed29[] = {
+	0x55,0x5C,0x3D,0xE7,0xC5,0x4C,0xD0,0x81,0x47,0x7D,0x40,0x95,
+	0x84,0x82,0x2E,0xCC,0xAF,0xAC,0x06,0xB9,0x16,0x3A,0x23,0xDB,
+	0x9C,0x12,0x99,0x2E,0x63,0xA5,0x00,0x40,0x4D,0xEE,0x28,0x17,
+	0xA1,0x64,0x5A,0xA3,0x73,0xC8,0xE4,0x5D,0xC0,0x34,0xD6,0x53
+};
+static const uint8_t prfout29[] = {
+	0x59,0x2B,0xFA,0xC9,0xA9,0xB3,0xCF,0x8C,0x25,0x3E,0xDD,0xBB,
+	0xB1,0xFD,0x07,0x95,0xA7,0x8D,0x70,0x24,0xEC,0xCB,0xA2,0x22,
+	0x9C,0x05,0x69,0x7F,0x56,0x38,0x0E,0xD9,0x5A,0x20,0x39,0xF8,
+	0x85,0x03,0xAB,0x60,0x0F,0x0B,0x9D,0x5C,0x39,0x6C,0x0C,0x9A,
+	0xFB,0x55,0xC1,0x57,0x6E,0x2F,0x9D,0x4F,0x6D,0x38,0x44,0x35,
+	0x15,0xD1,0xCD,0x8E,0x28,0xCE,0x33,0x1E,0x44,0xAC,0xF7,0x72,
+	0xC8,0xA0,0x54,0xF7,0xB8,0xCC,0x80,0xFD,0xD3,0x53,0xAE,0x64,
+	0xE1,0x52,0x22
+};
+
+#endif /* CFG_CRYPTO_WITH_HSM */
+
diff --git a/host/xtest/regression_1000.c b/host/xtest/regression_1000.c
index 4e4d298..f17829b 100644
--- a/host/xtest/regression_1000.c
+++ b/host/xtest/regression_1000.c
@@ -19,6 +19,7 @@
 #include <sys/stat.h>
 #include <sys/types.h>
 #include <unistd.h>
+#include <util.h>
 
 #include "xtest_test.h"
 #include "xtest_helpers.h"
@@ -35,6 +36,10 @@
 #ifdef CFG_SECSTOR_TA_MGMT_PTA
 #include <pta_secstor_ta_mgmt.h>
 #endif
+#ifdef CFG_CRYPTO_WITH_HSM
+#include <pta_sta_hsm.h>
+#include <nist/tlsv12prftestvectors.h>
+#endif
 
 #ifndef MIN
 #define MIN(a, b) ((a) < (b) ? (a) : (b))
@@ -58,6 +63,9 @@ static void xtest_tee_test_1014(ADBG_Case_t *Case_p);
 #endif
 static void xtest_tee_test_1015(ADBG_Case_t *Case_p);
 static void xtest_tee_test_1016(ADBG_Case_t *Case_p);
+#ifdef CFG_CRYPTO_WITH_HSM
+static void xtest_tee_test_1020(ADBG_Case_t *Case_p);
+#endif
 
 ADBG_CASE_DEFINE(regression, 1001, xtest_tee_test_1001, "Core self tests");
 ADBG_CASE_DEFINE(regression, 1002, xtest_tee_test_1002, "PTA parameters");
@@ -87,6 +95,10 @@ ADBG_CASE_DEFINE(regression, 1015, xtest_tee_test_1015,
 		"FS hash-tree corner cases");
 ADBG_CASE_DEFINE(regression, 1016, xtest_tee_test_1016,
 		"Test TA to TA transfers (in/out/inout memrefs on the stack)");
+#ifdef CFG_CRYPTO_WITH_HSM
+ADBG_CASE_DEFINE(regression, 1020, xtest_tee_test_1020,
+		"Test additional HSM services (out of crypto API)");
+#endif
 
 struct xtest_crypto_session {
 	ADBG_Case_t *c;
@@ -1263,3 +1275,183 @@ static void xtest_tee_test_1016(ADBG_Case_t *c)
 
 	TEEC_CloseSession(&session);
 }
+
+#ifdef CFG_CRYPTO_WITH_HSM
+
+/* TLSv1.2 PRF test vectors descriptor */
+struct xtest_hsm_case
+{
+	unsigned int level;
+    const uint8_t *secret;            /* Secret byte array */
+    uint32_t secret_sz;
+    const uint8_t *label;             /* Label byte array */
+    uint32_t label_sz;
+    const uint8_t *seed;              /* Seed byte array */
+    uint32_t seed_sz;
+    const uint8_t *prfout;			  /* Expected PRF output byte array */
+    uint32_t prfout_sz;
+    const uint32_t sha_id;            /* SHA algorithm Identifier */
+};
+
+#define XTEST_HSM_CASE(lvl, sc, sc_sz, lb, lb_sz, sd, sd_sz, out, out_sz, sha) \
+	{ (lvl), (sc), (sc_sz), (lb), (lb_sz), (sd), (sd_sz), \
+	  (out), (out_sz), (sha) }
+
+static const struct xtest_hsm_case hsm_cases[] = {
+	XTEST_HSM_CASE(0, secret0, SECRET0_SIZE, label0, LABEL0_SIZE,
+				   seed0, SEED0_SIZE, prfout0, PRFOUT0_SIZE, SHA_ID0),
+	XTEST_HSM_CASE(0, secret1, SECRET1_SIZE, label1, LABEL1_SIZE,
+				   seed1, SEED1_SIZE, prfout1, PRFOUT1_SIZE, SHA_ID1),
+	XTEST_HSM_CASE(0, secret2, SECRET2_SIZE, label2, LABEL2_SIZE,
+				   seed2, SEED2_SIZE, prfout2, PRFOUT2_SIZE, SHA_ID2),
+	XTEST_HSM_CASE(0, secret3, SECRET3_SIZE, label3, LABEL3_SIZE,
+				   seed3, SEED3_SIZE, prfout3, PRFOUT3_SIZE, SHA_ID3),
+	XTEST_HSM_CASE(0, secret4, SECRET4_SIZE, label4, LABEL4_SIZE,
+				   seed4, SEED4_SIZE, prfout4, PRFOUT4_SIZE, SHA_ID4),
+	XTEST_HSM_CASE(1, secret5, SECRET5_SIZE, label5, LABEL5_SIZE,
+				   seed5, SEED5_SIZE, prfout5, PRFOUT5_SIZE, SHA_ID5),
+	XTEST_HSM_CASE(1, secret6, SECRET6_SIZE, label6, LABEL6_SIZE,
+				   seed6, SEED6_SIZE, prfout6, PRFOUT6_SIZE, SHA_ID6),
+	XTEST_HSM_CASE(1, secret7, SECRET7_SIZE, label7, LABEL7_SIZE,
+				   seed7, SEED7_SIZE, prfout7, PRFOUT7_SIZE, SHA_ID7),
+	XTEST_HSM_CASE(1, secret8, SECRET8_SIZE, label8, LABEL8_SIZE,
+				   seed8, SEED8_SIZE, prfout8, PRFOUT8_SIZE, SHA_ID8),
+	XTEST_HSM_CASE(1, secret9, SECRET9_SIZE, label9, LABEL9_SIZE,
+				   seed9, SEED9_SIZE, prfout9, PRFOUT9_SIZE, SHA_ID9),
+	XTEST_HSM_CASE(2, secret10, SECRET10_SIZE, label10, LABEL10_SIZE,
+				   seed10, SEED10_SIZE, prfout10, PRFOUT10_SIZE, SHA_ID10),
+	XTEST_HSM_CASE(2, secret11, SECRET11_SIZE, label11, LABEL11_SIZE,
+				   seed11, SEED11_SIZE, prfout11, PRFOUT11_SIZE, SHA_ID11),
+	XTEST_HSM_CASE(2, secret12, SECRET12_SIZE, label12, LABEL12_SIZE,
+				   seed12, SEED12_SIZE, prfout12, PRFOUT12_SIZE, SHA_ID12),
+	XTEST_HSM_CASE(2, secret13, SECRET13_SIZE, label13, LABEL13_SIZE,
+				   seed13, SEED13_SIZE, prfout13, PRFOUT13_SIZE, SHA_ID13),
+	XTEST_HSM_CASE(2, secret14, SECRET14_SIZE, label14, LABEL14_SIZE,
+				   seed14, SEED14_SIZE, prfout14, PRFOUT14_SIZE, SHA_ID14),
+	XTEST_HSM_CASE(5, secret15, SECRET15_SIZE, label15, LABEL15_SIZE,
+				   seed15, SEED15_SIZE, prfout15, PRFOUT15_SIZE, SHA_ID15),
+	XTEST_HSM_CASE(5, secret16, SECRET16_SIZE, label16, LABEL16_SIZE,
+				   seed16, SEED16_SIZE, prfout16, PRFOUT16_SIZE, SHA_ID16),
+	XTEST_HSM_CASE(5, secret17, SECRET17_SIZE, label17, LABEL17_SIZE,
+				   seed17, SEED17_SIZE, prfout17, PRFOUT17_SIZE, SHA_ID17),
+	XTEST_HSM_CASE(5, secret18, SECRET18_SIZE, label18, LABEL18_SIZE,
+				   seed18, SEED18_SIZE, prfout18, PRFOUT18_SIZE, SHA_ID18),
+	XTEST_HSM_CASE(5, secret19, SECRET19_SIZE, label19, LABEL19_SIZE,
+				   seed19, SEED19_SIZE, prfout19, PRFOUT19_SIZE, SHA_ID19),
+	XTEST_HSM_CASE(10, secret20, SECRET20_SIZE, label20, LABEL20_SIZE,
+				   seed20, SEED20_SIZE, prfout20, PRFOUT20_SIZE, SHA_ID20),
+	XTEST_HSM_CASE(10, secret21, SECRET21_SIZE, label21, LABEL21_SIZE,
+				   seed21, SEED21_SIZE, prfout21, PRFOUT21_SIZE, SHA_ID21),
+	XTEST_HSM_CASE(10, secret22, SECRET22_SIZE, label22, LABEL22_SIZE,
+				   seed22, SEED22_SIZE, prfout22, PRFOUT22_SIZE, SHA_ID22),
+	XTEST_HSM_CASE(10, secret23, SECRET23_SIZE, label23, LABEL23_SIZE,
+				   seed23, SEED23_SIZE, prfout23, PRFOUT23_SIZE, SHA_ID23),
+	XTEST_HSM_CASE(10, secret24, SECRET24_SIZE, label24, LABEL24_SIZE,
+				   seed24, SEED24_SIZE, prfout24, PRFOUT24_SIZE, SHA_ID24),
+	XTEST_HSM_CASE(15, secret25, SECRET25_SIZE, label25, LABEL25_SIZE,
+				   seed25, SEED25_SIZE, prfout25, PRFOUT25_SIZE, SHA_ID25),
+	XTEST_HSM_CASE(15, secret26, SECRET26_SIZE, label26, LABEL26_SIZE,
+				   seed26, SEED26_SIZE, prfout26, PRFOUT26_SIZE, SHA_ID26),
+	XTEST_HSM_CASE(15, secret27, SECRET27_SIZE, label27, LABEL27_SIZE,
+				   seed27, SEED27_SIZE, prfout27, PRFOUT27_SIZE, SHA_ID27),
+	XTEST_HSM_CASE(15, secret28, SECRET28_SIZE, label28, LABEL28_SIZE,
+				   seed28, SEED28_SIZE, prfout28, PRFOUT28_SIZE, SHA_ID28),
+	XTEST_HSM_CASE(15, secret29, SECRET29_SIZE, label29, LABEL29_SIZE,
+				   seed29, SEED29_SIZE, prfout29, PRFOUT29_SIZE, SHA_ID29)
+};
+
+#define MAX_BUF_LEN		256
+
+static void xtest_tee_test_1020(ADBG_Case_t *c)
+{
+	TEEC_Session session = { 0 };
+	uint32_t ret_orig;
+	size_t n;
+	uint8_t prfres[MAX_BUF_LEN] = { 0 };
+
+	if (!ADBG_EXPECT_TEEC_SUCCESS(c,
+		xtest_teec_open_session(&session, &hsm_pta_uuid, NULL,
+		                        &ret_orig)))
+		return;
+
+	/*
+	 * PTA Cmd: Get HSM FW ID
+	 */
+	Do_ADBG_BeginSubCase(c, "Get HSM Firmware version ID");
+	{
+		TEEC_Operation op = TEEC_OPERATION_INITIALIZER;
+
+		op.paramTypes = TEEC_PARAM_TYPES(TEEC_VALUE_OUTPUT, TEEC_NONE,
+				TEEC_NONE, TEEC_NONE);
+		op.params[0].value.a = 0;
+		op.params[0].value.b = 0;
+
+		if (!ADBG_EXPECT_TEEC_SUCCESS(c, TEEC_InvokeCommand(
+						&session, PTA_HSM_CMD_GET_FW_ID, &op, &ret_orig)))
+			goto out;
+
+		Do_ADBG_Log("    HSM FW version ID: %x", op.params[0].value.a);
+	}
+	Do_ADBG_EndSubCase(c, NULL);
+
+	/*
+	 * PTA Cmd: Derive TLS secret
+	 */
+	Do_ADBG_BeginSubCase(c, "Derive TLS v1.2 PRF secret");
+	{
+		TEEC_Operation op = TEEC_OPERATION_INITIALIZER;
+		op.paramTypes = TEEC_PARAM_TYPES(TEEC_MEMREF_TEMP_INPUT,
+				TEEC_MEMREF_TEMP_INPUT,
+				TEEC_MEMREF_TEMP_INPUT,
+				TEEC_MEMREF_TEMP_INOUT);
+
+		for (n = 0; n < ARRAY_SIZE(hsm_cases); n++) {
+			const struct xtest_hsm_case *tv = hsm_cases + n;
+
+			if (tv->level > level)
+				continue;
+
+			Do_ADBG_Log("    Generating %d bytes with sha_id %d",
+						tv->prfout_sz, tv->sha_id);
+
+			/* Initialize Inputs with values from test vectors */
+			op.params[0].tmpref.buffer = (void *)tv->secret;
+			op.params[0].tmpref.size = tv->secret_sz;
+
+			op.params[1].tmpref.buffer = (void *)tv->label;
+			op.params[1].tmpref.size = tv->label_sz;
+
+			op.params[2].tmpref.buffer = (void *)tv->seed;
+			op.params[2].tmpref.size = tv->seed_sz;
+
+			memset(prfres, 0, sizeof(prfres));
+			op.params[3].tmpref.buffer = (void *)prfres;
+			op.params[3].tmpref.size = tv->prfout_sz;
+			/*
+			 * Set 1st word of output buffer to size reserved to buffer receiving
+			 * the derived secret.
+			 * Set 2nd word of buffer to hash algorithm identifier.
+			 */
+			*((uint32_t *)op.params[3].tmpref.buffer) = MAX_BUF_LEN;
+			*((uint32_t *)op.params[3].tmpref.buffer + 1) = tv->sha_id;
+
+			if (!ADBG_EXPECT_TEEC_SUCCESS(c, TEEC_InvokeCommand(
+							&session, PTA_HSM_CMD_TLSV12_PRF, &op, &ret_orig)))
+				goto out;
+
+			(void)ADBG_EXPECT_BUFFER(c, tv->prfout, tv->prfout_sz, prfres,
+									 tv->prfout_sz);
+		}
+	}
+	Do_ADBG_EndSubCase(c, NULL);
+
+	/*
+	 * PTA Cmd: Regenerate a new ECC key pair
+	 */
+	/* TODO */
+
+out:
+	TEEC_CloseSession(&session);
+}
+#endif
+
diff --git a/host/xtest/xtest_test.c b/host/xtest/xtest_test.c
index 95f2ac8..0f72124 100644
--- a/host/xtest/xtest_test.c
+++ b/host/xtest/xtest_test.c
@@ -34,6 +34,9 @@
 #include <tee_api_types.h>
 #include <TTA_DS_protocol.h>
 #endif
+#ifdef CFG_CRYPTO_WITH_HSM
+#include <pta_sta_hsm.h>
+#endif
 
 ADBG_ENUM_TABLE_DEFINE_BEGIN(TEEC_Result)
 ADBG_ENUM_TABLE_ENTRY(TEEC_SUCCESS),
@@ -105,3 +108,7 @@ const TEEC_UUID sdp_basic_ta_uuid = TA_SDP_BASIC_UUID;
 #ifdef WITH_GP_TESTS
 const TEEC_UUID gp_tta_ds_uuid = TA_TTA_DS_UUID;
 #endif
+#ifdef CFG_CRYPTO_WITH_HSM
+const TEEC_UUID hsm_pta_uuid = PTA_HSM_UUID;
+#endif
+
diff --git a/host/xtest/xtest_test.h b/host/xtest/xtest_test.h
index def35d9..b534869 100644
--- a/host/xtest/xtest_test.h
+++ b/host/xtest/xtest_test.h
@@ -120,6 +120,7 @@ extern const TEEC_UUID concurrent_large_ta_uuid;
 extern const TEEC_UUID storage_benchmark_ta_uuid;
 extern const TEEC_UUID socket_ta_uuid;
 extern const TEEC_UUID sdp_basic_ta_uuid;
+extern const TEEC_UUID hsm_pta_uuid;
 extern char *_device;
 
 #endif /*XTEST_TEST_H*/
-- 
2.7.4

